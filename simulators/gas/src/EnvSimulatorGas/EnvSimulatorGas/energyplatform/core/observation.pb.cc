#include "pch.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: energyplatform/core/observation.proto

#include "energyplatform/core/observation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_energyplatform_2fcore_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Edge_energyplatform_2fcore_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_energyplatform_2fcore_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_energyplatform_2fcore_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_energyplatform_2fcore_2fobservation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_energyplatform_2fcore_2fobservation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto;
namespace energyplatform {
class Observation_NodeValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Observation_NodeValuesEntry_DoNotUse> _instance;
} _Observation_NodeValuesEntry_DoNotUse_default_instance_;
class Observation_EdgeValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Observation_EdgeValuesEntry_DoNotUse> _instance;
} _Observation_EdgeValuesEntry_DoNotUse_default_instance_;
class ObservationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Observation> _instance;
} _Observation_default_instance_;
}  // namespace energyplatform
static void InitDefaultsscc_info_Observation_energyplatform_2fcore_2fobservation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_Observation_default_instance_;
    new (ptr) ::energyplatform::Observation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::energyplatform::Observation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Observation_energyplatform_2fcore_2fobservation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Observation_energyplatform_2fcore_2fobservation_2eproto}, {
      &scc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto.base,
      &scc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto.base,}};

static void InitDefaultsscc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_Observation_EdgeValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::energyplatform::Observation_EdgeValuesEntry_DoNotUse();
  }
  ::energyplatform::Observation_EdgeValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto}, {
      &scc_info_Edge_energyplatform_2fcore_2fgraph_2eproto.base,}};

static void InitDefaultsscc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_Observation_NodeValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::energyplatform::Observation_NodeValuesEntry_DoNotUse();
  }
  ::energyplatform::Observation_NodeValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto}, {
      &scc_info_Node_energyplatform_2fcore_2fgraph_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_energyplatform_2fcore_2fobservation_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_energyplatform_2fcore_2fobservation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_energyplatform_2fcore_2fobservation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_energyplatform_2fcore_2fobservation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_NodeValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_NodeValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_NodeValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_NodeValuesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_EdgeValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_EdgeValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_EdgeValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation_EdgeValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation, node_values_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::Observation, edge_values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::energyplatform::Observation_NodeValuesEntry_DoNotUse)},
  { 9, 16, sizeof(::energyplatform::Observation_EdgeValuesEntry_DoNotUse)},
  { 18, -1, sizeof(::energyplatform::Observation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_Observation_NodeValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_Observation_EdgeValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_Observation_default_instance_),
};

const char descriptor_table_protodef_energyplatform_2fcore_2fobservation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%energyplatform/core/observation.proto\022"
  "\016energyplatform\032\037energyplatform/core/gra"
  "ph.proto\"\243\002\n\013Observation\022@\n\013node_values\030"
  "\001 \003(\0132+.energyplatform.Observation.NodeV"
  "aluesEntry\022@\n\013edge_values\030\002 \003(\0132+.energy"
  "platform.Observation.EdgeValuesEntry\032G\n\017"
  "NodeValuesEntry\022\013\n\003key\030\001 \001(\005\022#\n\005value\030\002 "
  "\001(\0132\024.energyplatform.Node:\0028\001\032G\n\017EdgeVal"
  "uesEntry\022\013\n\003key\030\001 \001(\005\022#\n\005value\030\002 \001(\0132\024.e"
  "nergyplatform.Edge:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_energyplatform_2fcore_2fobservation_2eproto_deps[1] = {
  &::descriptor_table_energyplatform_2fcore_2fgraph_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_energyplatform_2fcore_2fobservation_2eproto_sccs[3] = {
  &scc_info_Observation_energyplatform_2fcore_2fobservation_2eproto.base,
  &scc_info_Observation_EdgeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto.base,
  &scc_info_Observation_NodeValuesEntry_DoNotUse_energyplatform_2fcore_2fobservation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_energyplatform_2fcore_2fobservation_2eproto_once;
static bool descriptor_table_energyplatform_2fcore_2fobservation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_energyplatform_2fcore_2fobservation_2eproto = {
  &descriptor_table_energyplatform_2fcore_2fobservation_2eproto_initialized, descriptor_table_protodef_energyplatform_2fcore_2fobservation_2eproto, "energyplatform/core/observation.proto", 390,
  &descriptor_table_energyplatform_2fcore_2fobservation_2eproto_once, descriptor_table_energyplatform_2fcore_2fobservation_2eproto_sccs, descriptor_table_energyplatform_2fcore_2fobservation_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_energyplatform_2fcore_2fobservation_2eproto::offsets,
  file_level_metadata_energyplatform_2fcore_2fobservation_2eproto, 3, file_level_enum_descriptors_energyplatform_2fcore_2fobservation_2eproto, file_level_service_descriptors_energyplatform_2fcore_2fobservation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_energyplatform_2fcore_2fobservation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_energyplatform_2fcore_2fobservation_2eproto), true);
namespace energyplatform {

// ===================================================================

Observation_NodeValuesEntry_DoNotUse::Observation_NodeValuesEntry_DoNotUse() {}
Observation_NodeValuesEntry_DoNotUse::Observation_NodeValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Observation_NodeValuesEntry_DoNotUse::MergeFrom(const Observation_NodeValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Observation_NodeValuesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Observation_NodeValuesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Observation_EdgeValuesEntry_DoNotUse::Observation_EdgeValuesEntry_DoNotUse() {}
Observation_EdgeValuesEntry_DoNotUse::Observation_EdgeValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Observation_EdgeValuesEntry_DoNotUse::MergeFrom(const Observation_EdgeValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Observation_EdgeValuesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Observation_EdgeValuesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Observation::InitAsDefaultInstance() {
}
class Observation::_Internal {
 public:
};

void Observation::clear_node_values() {
  node_values_.Clear();
}
void Observation::clear_edge_values() {
  edge_values_.Clear();
}
Observation::Observation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energyplatform.Observation)
}
Observation::Observation(const Observation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_values_.MergeFrom(from.node_values_);
  edge_values_.MergeFrom(from.edge_values_);
  // @@protoc_insertion_point(copy_constructor:energyplatform.Observation)
}

void Observation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Observation_energyplatform_2fcore_2fobservation_2eproto.base);
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:energyplatform.Observation)
  SharedDtor();
}

void Observation::SharedDtor() {
}

void Observation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Observation& Observation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Observation_energyplatform_2fcore_2fobservation_2eproto.base);
  return *internal_default_instance();
}


void Observation::Clear() {
// @@protoc_insertion_point(message_clear_start:energyplatform.Observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_values_.Clear();
  edge_values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Observation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .energyplatform.Node> node_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&node_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<int32, .energyplatform.Edge> edge_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&edge_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Observation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:energyplatform.Observation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .energyplatform.Node> node_values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          Observation_NodeValuesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Observation_NodeValuesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node > > parser(&node_values_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .energyplatform.Edge> edge_values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          Observation_EdgeValuesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Observation_EdgeValuesEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge > > parser(&edge_values_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energyplatform.Observation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energyplatform.Observation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Observation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energyplatform.Observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .energyplatform.Node> node_values = 1;
  if (!this->node_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->node_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_iterator
          it = this->node_values().begin();
          it != this->node_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Observation_NodeValuesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_iterator
          it = this->node_values().begin();
          it != this->node_values().end(); ++it) {
        Observation_NodeValuesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  // map<int32, .energyplatform.Edge> edge_values = 2;
  if (!this->edge_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->edge_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->edge_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_iterator
          it = this->edge_values().begin();
          it != this->edge_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Observation_EdgeValuesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_iterator
          it = this->edge_values().begin();
          it != this->edge_values().end(); ++it) {
        Observation_EdgeValuesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energyplatform.Observation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Observation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energyplatform.Observation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .energyplatform.Node> node_values = 1;
  if (!this->node_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->node_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->node_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_iterator
          it = this->node_values().begin();
          it != this->node_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Observation_NodeValuesEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_iterator
          it = this->node_values().begin();
          it != this->node_values().end(); ++it) {
        target = Observation_NodeValuesEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  // map<int32, .energyplatform.Edge> edge_values = 2;
  if (!this->edge_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->edge_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->edge_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_iterator
          it = this->edge_values().begin();
          it != this->edge_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Observation_EdgeValuesEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_iterator
          it = this->edge_values().begin();
          it != this->edge_values().end(); ++it) {
        target = Observation_EdgeValuesEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energyplatform.Observation)
  return target;
}

size_t Observation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:energyplatform.Observation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .energyplatform.Node> node_values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->node_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Node >::const_iterator
      it = this->node_values().begin();
      it != this->node_values().end(); ++it) {
    total_size += Observation_NodeValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .energyplatform.Edge> edge_values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->edge_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::energyplatform::Edge >::const_iterator
      it = this->edge_values().begin();
      it != this->edge_values().end(); ++it) {
    total_size += Observation_EdgeValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Observation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energyplatform.Observation)
  GOOGLE_DCHECK_NE(&from, this);
  const Observation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Observation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energyplatform.Observation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energyplatform.Observation)
    MergeFrom(*source);
  }
}

void Observation::MergeFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energyplatform.Observation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_values_.MergeFrom(from.node_values_);
  edge_values_.MergeFrom(from.edge_values_);
}

void Observation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energyplatform.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observation::CopyFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energyplatform.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {
  return true;
}

void Observation::InternalSwap(Observation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_values_.Swap(&other->node_values_);
  edge_values_.Swap(&other->edge_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Observation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace energyplatform
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::energyplatform::Observation_NodeValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::energyplatform::Observation_NodeValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::Observation_NodeValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::energyplatform::Observation_EdgeValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::energyplatform::Observation_EdgeValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::Observation_EdgeValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::energyplatform::Observation* Arena::CreateMaybeMessage< ::energyplatform::Observation >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::Observation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
