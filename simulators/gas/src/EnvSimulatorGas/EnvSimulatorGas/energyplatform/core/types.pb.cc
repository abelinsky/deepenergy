#include "pch.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: energyplatform/core/types.proto

#include "energyplatform/core/types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace energyplatform {
class DiscreteIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscreteInterval> _instance;
} _DiscreteInterval_default_instance_;
class ContinuousIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContinuousInterval> _instance;
} _ContinuousInterval_default_instance_;
class PhysicalParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicalParam> _instance;
} _PhysicalParam_default_instance_;
}  // namespace energyplatform
static void InitDefaultsscc_info_ContinuousInterval_energyplatform_2fcore_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_ContinuousInterval_default_instance_;
    new (ptr) ::energyplatform::ContinuousInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::energyplatform::ContinuousInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContinuousInterval_energyplatform_2fcore_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ContinuousInterval_energyplatform_2fcore_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_DiscreteInterval_energyplatform_2fcore_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_DiscreteInterval_default_instance_;
    new (ptr) ::energyplatform::DiscreteInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::energyplatform::DiscreteInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscreteInterval_energyplatform_2fcore_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiscreteInterval_energyplatform_2fcore_2ftypes_2eproto}, {}};

static void InitDefaultsscc_info_PhysicalParam_energyplatform_2fcore_2ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::energyplatform::_PhysicalParam_default_instance_;
    new (ptr) ::energyplatform::PhysicalParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::energyplatform::PhysicalParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhysicalParam_energyplatform_2fcore_2ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PhysicalParam_energyplatform_2fcore_2ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_energyplatform_2fcore_2ftypes_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_energyplatform_2fcore_2ftypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_energyplatform_2fcore_2ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_energyplatform_2fcore_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::energyplatform::DiscreteInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::DiscreteInterval, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::energyplatform::ContinuousInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::ContinuousInterval, low_value_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::ContinuousInterval, high_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::energyplatform::PhysicalParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::energyplatform::PhysicalParam, type_),
  PROTOBUF_FIELD_OFFSET(::energyplatform::PhysicalParam, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::energyplatform::DiscreteInterval)},
  { 6, -1, sizeof(::energyplatform::ContinuousInterval)},
  { 13, -1, sizeof(::energyplatform::PhysicalParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_DiscreteInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_ContinuousInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::energyplatform::_PhysicalParam_default_instance_),
};

const char descriptor_table_protodef_energyplatform_2fcore_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037energyplatform/core/types.proto\022\016energ"
  "yplatform\"\035\n\020DiscreteInterval\022\t\n\001n\030\001 \001(\005"
  "\";\n\022ContinuousInterval\022\021\n\tlow_value\030\001 \001("
  "\001\022\022\n\nhigh_value\030\002 \001(\001\"O\n\rPhysicalParam\022/"
  "\n\004type\030\001 \001(\0162!.energyplatform.PhysicalVa"
  "lueType\022\r\n\005value\030\002 \001(\002*3\n\rParameterType\022"
  "\017\n\013PT_DISCRETE\020\000\022\021\n\rPT_CONTINUOUS\020\001*\206\001\n\021"
  "PhysicalValueType\022\r\n\tPV_NOTYPE\020\000\022\014\n\010PV_S"
  "TATE\020\001\022\017\n\013PV_PRESSURE\020\002\022\022\n\016PV_TEMPERATUR"
  "E\020\003\022\016\n\nPV_DENSITY\020\004\022\r\n\tPV_VOLUME\020\005\022\020\n\014PV"
  "_FREQUENCY\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_energyplatform_2fcore_2ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_energyplatform_2fcore_2ftypes_2eproto_sccs[3] = {
  &scc_info_ContinuousInterval_energyplatform_2fcore_2ftypes_2eproto.base,
  &scc_info_DiscreteInterval_energyplatform_2fcore_2ftypes_2eproto.base,
  &scc_info_PhysicalParam_energyplatform_2fcore_2ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_energyplatform_2fcore_2ftypes_2eproto_once;
static bool descriptor_table_energyplatform_2fcore_2ftypes_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_energyplatform_2fcore_2ftypes_2eproto = {
  &descriptor_table_energyplatform_2fcore_2ftypes_2eproto_initialized, descriptor_table_protodef_energyplatform_2fcore_2ftypes_2eproto, "energyplatform/core/types.proto", 420,
  &descriptor_table_energyplatform_2fcore_2ftypes_2eproto_once, descriptor_table_energyplatform_2fcore_2ftypes_2eproto_sccs, descriptor_table_energyplatform_2fcore_2ftypes_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_energyplatform_2fcore_2ftypes_2eproto::offsets,
  file_level_metadata_energyplatform_2fcore_2ftypes_2eproto, 3, file_level_enum_descriptors_energyplatform_2fcore_2ftypes_2eproto, file_level_service_descriptors_energyplatform_2fcore_2ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_energyplatform_2fcore_2ftypes_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_energyplatform_2fcore_2ftypes_2eproto), true);
namespace energyplatform {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_energyplatform_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_energyplatform_2fcore_2ftypes_2eproto[0];
}
bool ParameterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhysicalValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_energyplatform_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_energyplatform_2fcore_2ftypes_2eproto[1];
}
bool PhysicalValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DiscreteInterval::InitAsDefaultInstance() {
}
class DiscreteInterval::_Internal {
 public:
};

DiscreteInterval::DiscreteInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energyplatform.DiscreteInterval)
}
DiscreteInterval::DiscreteInterval(const DiscreteInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:energyplatform.DiscreteInterval)
}

void DiscreteInterval::SharedCtor() {
  n_ = 0;
}

DiscreteInterval::~DiscreteInterval() {
  // @@protoc_insertion_point(destructor:energyplatform.DiscreteInterval)
  SharedDtor();
}

void DiscreteInterval::SharedDtor() {
}

void DiscreteInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscreteInterval& DiscreteInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscreteInterval_energyplatform_2fcore_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void DiscreteInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:energyplatform.DiscreteInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiscreteInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiscreteInterval::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:energyplatform.DiscreteInterval)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 n = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energyplatform.DiscreteInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energyplatform.DiscreteInterval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiscreteInterval::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energyplatform.DiscreteInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->n(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energyplatform.DiscreteInterval)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteInterval::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energyplatform.DiscreteInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->n(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energyplatform.DiscreteInterval)
  return target;
}

size_t DiscreteInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:energyplatform.DiscreteInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energyplatform.DiscreteInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energyplatform.DiscreteInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energyplatform.DiscreteInterval)
    MergeFrom(*source);
  }
}

void DiscreteInterval::MergeFrom(const DiscreteInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energyplatform.DiscreteInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n() != 0) {
    set_n(from.n());
  }
}

void DiscreteInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energyplatform.DiscreteInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteInterval::CopyFrom(const DiscreteInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energyplatform.DiscreteInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteInterval::IsInitialized() const {
  return true;
}

void DiscreteInterval::InternalSwap(DiscreteInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContinuousInterval::InitAsDefaultInstance() {
}
class ContinuousInterval::_Internal {
 public:
};

ContinuousInterval::ContinuousInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energyplatform.ContinuousInterval)
}
ContinuousInterval::ContinuousInterval(const ContinuousInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_value_, &from.low_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_value_) -
    reinterpret_cast<char*>(&low_value_)) + sizeof(high_value_));
  // @@protoc_insertion_point(copy_constructor:energyplatform.ContinuousInterval)
}

void ContinuousInterval::SharedCtor() {
  ::memset(&low_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_value_) -
      reinterpret_cast<char*>(&low_value_)) + sizeof(high_value_));
}

ContinuousInterval::~ContinuousInterval() {
  // @@protoc_insertion_point(destructor:energyplatform.ContinuousInterval)
  SharedDtor();
}

void ContinuousInterval::SharedDtor() {
}

void ContinuousInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContinuousInterval& ContinuousInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContinuousInterval_energyplatform_2fcore_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void ContinuousInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:energyplatform.ContinuousInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_value_) -
      reinterpret_cast<char*>(&low_value_)) + sizeof(high_value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContinuousInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double low_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          low_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          high_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContinuousInterval::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:energyplatform.ContinuousInterval)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double low_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energyplatform.ContinuousInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energyplatform.ContinuousInterval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContinuousInterval::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energyplatform.ContinuousInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double low_value = 1;
  if (!(this->low_value() <= 0 && this->low_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->low_value(), output);
  }

  // double high_value = 2;
  if (!(this->high_value() <= 0 && this->high_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->high_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energyplatform.ContinuousInterval)
}

::PROTOBUF_NAMESPACE_ID::uint8* ContinuousInterval::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energyplatform.ContinuousInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double low_value = 1;
  if (!(this->low_value() <= 0 && this->low_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->low_value(), target);
  }

  // double high_value = 2;
  if (!(this->high_value() <= 0 && this->high_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->high_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energyplatform.ContinuousInterval)
  return target;
}

size_t ContinuousInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:energyplatform.ContinuousInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double low_value = 1;
  if (!(this->low_value() <= 0 && this->low_value() >= 0)) {
    total_size += 1 + 8;
  }

  // double high_value = 2;
  if (!(this->high_value() <= 0 && this->high_value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinuousInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energyplatform.ContinuousInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinuousInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContinuousInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energyplatform.ContinuousInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energyplatform.ContinuousInterval)
    MergeFrom(*source);
  }
}

void ContinuousInterval::MergeFrom(const ContinuousInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energyplatform.ContinuousInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.low_value() <= 0 && from.low_value() >= 0)) {
    set_low_value(from.low_value());
  }
  if (!(from.high_value() <= 0 && from.high_value() >= 0)) {
    set_high_value(from.high_value());
  }
}

void ContinuousInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energyplatform.ContinuousInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinuousInterval::CopyFrom(const ContinuousInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energyplatform.ContinuousInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousInterval::IsInitialized() const {
  return true;
}

void ContinuousInterval::InternalSwap(ContinuousInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(low_value_, other->low_value_);
  swap(high_value_, other->high_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinuousInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicalParam::InitAsDefaultInstance() {
}
class PhysicalParam::_Internal {
 public:
};

PhysicalParam::PhysicalParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energyplatform.PhysicalParam)
}
PhysicalParam::PhysicalParam(const PhysicalParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:energyplatform.PhysicalParam)
}

void PhysicalParam::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

PhysicalParam::~PhysicalParam() {
  // @@protoc_insertion_point(destructor:energyplatform.PhysicalParam)
  SharedDtor();
}

void PhysicalParam::SharedDtor() {
}

void PhysicalParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicalParam& PhysicalParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicalParam_energyplatform_2fcore_2ftypes_2eproto.base);
  return *internal_default_instance();
}


void PhysicalParam::Clear() {
// @@protoc_insertion_point(message_clear_start:energyplatform.PhysicalParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PhysicalParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .energyplatform.PhysicalValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::energyplatform::PhysicalValueType>(val));
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PhysicalParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:energyplatform.PhysicalParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .energyplatform.PhysicalValueType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::energyplatform::PhysicalValueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energyplatform.PhysicalParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energyplatform.PhysicalParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PhysicalParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energyplatform.PhysicalParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .energyplatform.PhysicalValueType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energyplatform.PhysicalParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicalParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energyplatform.PhysicalParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .energyplatform.PhysicalValueType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energyplatform.PhysicalParam)
  return target;
}

size_t PhysicalParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:energyplatform.PhysicalParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .energyplatform.PhysicalValueType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energyplatform.PhysicalParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicalParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energyplatform.PhysicalParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energyplatform.PhysicalParam)
    MergeFrom(*source);
  }
}

void PhysicalParam::MergeFrom(const PhysicalParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energyplatform.PhysicalParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void PhysicalParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energyplatform.PhysicalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalParam::CopyFrom(const PhysicalParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energyplatform.PhysicalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalParam::IsInitialized() const {
  return true;
}

void PhysicalParam::InternalSwap(PhysicalParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicalParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace energyplatform
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::energyplatform::DiscreteInterval* Arena::CreateMaybeMessage< ::energyplatform::DiscreteInterval >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::DiscreteInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::energyplatform::ContinuousInterval* Arena::CreateMaybeMessage< ::energyplatform::ContinuousInterval >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::ContinuousInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::energyplatform::PhysicalParam* Arena::CreateMaybeMessage< ::energyplatform::PhysicalParam >(Arena* arena) {
  return Arena::CreateInternal< ::energyplatform::PhysicalParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
