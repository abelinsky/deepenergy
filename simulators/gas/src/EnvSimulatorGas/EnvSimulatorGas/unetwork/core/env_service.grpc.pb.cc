#include "pch.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: unetwork/core/env_service.proto

#include "unetwork/core/env_service.pb.h"
#include "unetwork/core/env_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace unetwork {

static const char* EnvService_method_names[] = {
  "/unetwork.EnvService/LoadData",
  "/unetwork.EnvService/SetCurrentTask",
  "/unetwork.EnvService/GetEnvDescription",
  "/unetwork.EnvService/GetOptimizationParams",
  "/unetwork.EnvService/Reset",
  "/unetwork.EnvService/Step",
  "/unetwork.EnvService/Stop",
};

std::unique_ptr< EnvService::Stub> EnvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvService::Stub> stub(new EnvService::Stub(channel));
  return stub;
}

EnvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LoadData_(EnvService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentTask_(EnvService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEnvDescription_(EnvService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOptimizationParams_(EnvService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(EnvService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(EnvService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(EnvService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnvService::Stub::LoadData(::grpc::ClientContext* context, const ::unetwork::LoadDataRequest& request, ::unetwork::LoadDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadData_, context, request, response);
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::unetwork::LoadDataRequest* request, ::unetwork::LoadDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::LoadDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::unetwork::LoadDataRequest* request, ::unetwork::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::LoadDataResponse>* EnvService::Stub::AsyncLoadDataRaw(::grpc::ClientContext* context, const ::unetwork::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::LoadDataResponse>* EnvService::Stub::PrepareAsyncLoadDataRaw(::grpc::ClientContext* context, const ::unetwork::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, false);
}

::grpc::Status EnvService::Stub::SetCurrentTask(::grpc::ClientContext* context, const ::unetwork::SetCurrentTaskRequest& request, ::unetwork::SetCurrentTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentTask_, context, request, response);
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::unetwork::SetCurrentTaskRequest* request, ::unetwork::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::unetwork::SetCurrentTaskRequest* request, ::unetwork::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::SetCurrentTaskResponse>* EnvService::Stub::AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::unetwork::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::SetCurrentTaskResponse>* EnvService::Stub::PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::unetwork::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, false);
}

::grpc::Status EnvService::Stub::GetEnvDescription(::grpc::ClientContext* context, const ::unetwork::GetEnvDescriptionRequest& request, ::unetwork::GetEnvDescriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnvDescription_, context, request, response);
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::unetwork::GetEnvDescriptionRequest* request, ::unetwork::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::unetwork::GetEnvDescriptionRequest* request, ::unetwork::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::GetEnvDescriptionResponse>* EnvService::Stub::AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::unetwork::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::GetEnvDescriptionResponse>* EnvService::Stub::PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::unetwork::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, false);
}

::grpc::Status EnvService::Stub::GetOptimizationParams(::grpc::ClientContext* context, const ::unetwork::GetOptimizationParamsRequest& request, ::unetwork::GetOptimizationParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOptimizationParams_, context, request, response);
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::unetwork::GetOptimizationParamsRequest* request, ::unetwork::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::unetwork::GetOptimizationParamsRequest* request, ::unetwork::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::GetOptimizationParamsResponse>* EnvService::Stub::AsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::unetwork::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::GetOptimizationParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetOptimizationParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::GetOptimizationParamsResponse>* EnvService::Stub::PrepareAsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::unetwork::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::GetOptimizationParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetOptimizationParams_, context, request, false);
}

::grpc::Status EnvService::Stub::Reset(::grpc::ClientContext* context, const ::unetwork::ResetRequest& request, ::unetwork::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::unetwork::ResetRequest* request, ::unetwork::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::unetwork::ResetRequest* request, ::unetwork::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::ResetResponse>* EnvService::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::unetwork::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::ResetResponse>* EnvService::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::unetwork::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status EnvService::Stub::Step(::grpc::ClientContext* context, const ::unetwork::StepRequest& request, ::unetwork::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Step_, context, request, response);
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::unetwork::StepRequest* request, ::unetwork::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::unetwork::StepRequest* request, ::unetwork::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::StepResponse>* EnvService::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::unetwork::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::StepResponse>* EnvService::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::unetwork::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, false);
}

::grpc::Status EnvService::Stub::Stop(::grpc::ClientContext* context, const ::unetwork::StopRequest& request, ::unetwork::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::unetwork::StopRequest* request, ::unetwork::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::unetwork::StopRequest* request, ::unetwork::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::StopResponse>* EnvService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::unetwork::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::StopResponse>* EnvService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::unetwork::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

EnvService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::LoadDataRequest, ::unetwork::LoadDataResponse>(
          std::mem_fn(&EnvService::Service::LoadData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::SetCurrentTaskRequest, ::unetwork::SetCurrentTaskResponse>(
          std::mem_fn(&EnvService::Service::SetCurrentTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::GetEnvDescriptionRequest, ::unetwork::GetEnvDescriptionResponse>(
          std::mem_fn(&EnvService::Service::GetEnvDescription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::GetOptimizationParamsRequest, ::unetwork::GetOptimizationParamsResponse>(
          std::mem_fn(&EnvService::Service::GetOptimizationParams), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::ResetRequest, ::unetwork::ResetResponse>(
          std::mem_fn(&EnvService::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::StepRequest, ::unetwork::StepResponse>(
          std::mem_fn(&EnvService::Service::Step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::unetwork::StopRequest, ::unetwork::StopResponse>(
          std::mem_fn(&EnvService::Service::Stop), this)));
}

EnvService::Service::~Service() {
}

::grpc::Status EnvService::Service::LoadData(::grpc::ServerContext* context, const ::unetwork::LoadDataRequest* request, ::unetwork::LoadDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::SetCurrentTask(::grpc::ServerContext* context, const ::unetwork::SetCurrentTaskRequest* request, ::unetwork::SetCurrentTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::GetEnvDescription(::grpc::ServerContext* context, const ::unetwork::GetEnvDescriptionRequest* request, ::unetwork::GetEnvDescriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::GetOptimizationParams(::grpc::ServerContext* context, const ::unetwork::GetOptimizationParamsRequest* request, ::unetwork::GetOptimizationParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Reset(::grpc::ServerContext* context, const ::unetwork::ResetRequest* request, ::unetwork::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Step(::grpc::ServerContext* context, const ::unetwork::StepRequest* request, ::unetwork::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Stop(::grpc::ServerContext* context, const ::unetwork::StopRequest* request, ::unetwork::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unetwork

