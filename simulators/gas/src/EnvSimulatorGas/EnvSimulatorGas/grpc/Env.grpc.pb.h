// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Env.proto
#ifndef GRPC_Env_2eproto__INCLUDED
#define GRPC_Env_2eproto__INCLUDED

#include "Env.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace energy_platform {

class Env final {
 public:
  static constexpr char const* service_full_name() {
    return "energy_platform.Env";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sets data for calculations. 
    virtual ::grpc::Status SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::energy_platform::SetDataLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>> AsyncSetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>>(AsyncSetDataLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>> PrepareAsyncSetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>>(PrepareAsyncSetDataLocationRaw(context, request, cq));
    }
    // Loads data and returns environment description. Data location must be already set. 
    virtual ::grpc::Status GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::energy_platform::GetEnvDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>> AsyncGetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>>(AsyncGetEnvDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>> PrepareAsyncGetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>>(PrepareAsyncGetEnvDescriptionRaw(context, request, cq));
    }
    //  Sets current task  
    virtual ::grpc::Status SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::energy_platform::SetCurrentTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>> AsyncSetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>>(AsyncSetCurrentTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>> PrepareAsyncSetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>>(PrepareAsyncSetCurrentTaskRaw(context, request, cq));
    }
    //  Returns the list of control parameters (possible agent's actions) 
    virtual ::grpc::Status GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::energy_platform::AllowedActionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>> AsyncGetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>>(AsyncGetAllowedActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>> PrepareAsyncGetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>>(PrepareAsyncGetAllowedActionsRaw(context, request, cq));
    }
    //  Resets the state of the environment (the simulator state) and returns an initial observation.
    //
    // Args:
    // ResetParams: params needed to reset the simulator. 
    //
    // Returns:
    // Observation: the initial observation. 
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::energy_platform::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    //  Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
    //
    // Args:
    // StepParams: the action provided by the AI-agent
    //
    // Returns:
    // StepResult: results from the simulation step.
    //
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::energy_platform::StepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    //  Stops simulations.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::energy_platform::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sets data for calculations. 
      virtual void SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Loads data and returns environment description. Data location must be already set. 
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Sets current task  
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Returns the list of control parameters (possible agent's actions) 
      virtual void GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Resets the state of the environment (the simulator state) and returns an initial observation.
      //
      // Args:
      // ResetParams: params needed to reset the simulator. 
      //
      // Returns:
      // Observation: the initial observation. 
      virtual void Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
      //
      // Args:
      // StepParams: the action provided by the AI-agent
      //
      // Returns:
      // StepResult: results from the simulation step.
      //
      virtual void Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Stops simulations.
      virtual void Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>* AsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetDataLocationResponse>* PrepareAsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>* AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::GetEnvDescriptionResponse>* PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>* AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::SetCurrentTaskResponse>* PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>* AsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::AllowedActionsResponse>* PrepareAsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::energy_platform::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::energy_platform::SetDataLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>> AsyncSetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>>(AsyncSetDataLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>> PrepareAsyncSetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>>(PrepareAsyncSetDataLocationRaw(context, request, cq));
    }
    ::grpc::Status GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::energy_platform::GetEnvDescriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>> AsyncGetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>>(AsyncGetEnvDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>> PrepareAsyncGetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>>(PrepareAsyncGetEnvDescriptionRaw(context, request, cq));
    }
    ::grpc::Status SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::energy_platform::SetCurrentTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>> AsyncSetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>>(AsyncSetCurrentTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>> PrepareAsyncSetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>>(PrepareAsyncSetCurrentTaskRaw(context, request, cq));
    }
    ::grpc::Status GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::energy_platform::AllowedActionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>> AsyncGetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>>(AsyncGetAllowedActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>> PrepareAsyncGetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>>(PrepareAsyncGetAllowedActionsRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::energy_platform::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::energy_platform::StepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::energy_platform::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>* AsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>* PrepareAsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>* AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>* PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>* AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>* PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>* AsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>* PrepareAsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetDataLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnvDescription_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCurrentTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllowedActions_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sets data for calculations. 
    virtual ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response);
    // Loads data and returns environment description. Data location must be already set. 
    virtual ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response);
    //  Sets current task  
    virtual ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response);
    //  Returns the list of control parameters (possible agent's actions) 
    virtual ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response);
    //  Resets the state of the environment (the simulator state) and returns an initial observation.
    //
    // Args:
    // ResetParams: params needed to reset the simulator. 
    //
    // Returns:
    // Observation: the initial observation. 
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response);
    //  Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
    //
    // Args:
    // StepParams: the action provided by the AI-agent
    //
    // Returns:
    // StepResult: results from the simulation step.
    //
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response);
    //  Stops simulations.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetDataLocation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDataLocation(::grpc::ServerContext* context, ::energy_platform::SetDataLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::SetDataLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvDescription(::grpc::ServerContext* context, ::energy_platform::GetEnvDescriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::GetEnvDescriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentTask(::grpc::ServerContext* context, ::energy_platform::SetCurrentTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::SetCurrentTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllowedActions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllowedActions(::grpc::ServerContext* context, ::energy_platform::AllowedActionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::AllowedActionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::energy_platform::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::energy_platform::StepRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::StepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::energy_platform::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::energy_platform::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetDataLocation<WithAsyncMethod_GetEnvDescription<WithAsyncMethod_SetCurrentTask<WithAsyncMethod_GetAllowedActions<WithAsyncMethod_Reset<WithAsyncMethod_Step<WithAsyncMethod_Stop<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetDataLocation() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::SetDataLocationRequest, ::energy_platform::SetDataLocationResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::SetDataLocationRequest* request,
                 ::energy_platform::SetDataLocationResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetDataLocation(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetDataLocation(
        ::grpc::experimental::MessageAllocator< ::energy_platform::SetDataLocationRequest, ::energy_platform::SetDataLocationResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::SetDataLocationRequest, ::energy_platform::SetDataLocationResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetEnvDescription() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::GetEnvDescriptionRequest, ::energy_platform::GetEnvDescriptionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::GetEnvDescriptionRequest* request,
                 ::energy_platform::GetEnvDescriptionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetEnvDescription(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetEnvDescription(
        ::grpc::experimental::MessageAllocator< ::energy_platform::GetEnvDescriptionRequest, ::energy_platform::GetEnvDescriptionResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::GetEnvDescriptionRequest, ::energy_platform::GetEnvDescriptionResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetCurrentTask() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::SetCurrentTaskRequest, ::energy_platform::SetCurrentTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::SetCurrentTaskRequest* request,
                 ::energy_platform::SetCurrentTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetCurrentTask(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetCurrentTask(
        ::grpc::experimental::MessageAllocator< ::energy_platform::SetCurrentTaskRequest, ::energy_platform::SetCurrentTaskResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::SetCurrentTaskRequest, ::energy_platform::SetCurrentTaskResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAllowedActions() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::AllowedActionsRequest, ::energy_platform::AllowedActionsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::AllowedActionsRequest* request,
                 ::energy_platform::AllowedActionsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAllowedActions(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAllowedActions(
        ::grpc::experimental::MessageAllocator< ::energy_platform::AllowedActionsRequest, ::energy_platform::AllowedActionsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::AllowedActionsRequest, ::energy_platform::AllowedActionsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::ResetRequest, ::energy_platform::ResetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::ResetRequest* request,
                 ::energy_platform::ResetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Reset(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::energy_platform::ResetRequest, ::energy_platform::ResetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::ResetRequest, ::energy_platform::ResetResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::StepRequest, ::energy_platform::StepResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::StepRequest* request,
                 ::energy_platform::StepResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Step(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Step(
        ::grpc::experimental::MessageAllocator< ::energy_platform::StepRequest, ::energy_platform::StepResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::StepRequest, ::energy_platform::StepResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::energy_platform::StopRequest, ::energy_platform::StopResponse>(
          [this](::grpc::ServerContext* context,
                 const ::energy_platform::StopRequest* request,
                 ::energy_platform::StopResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::energy_platform::StopRequest, ::energy_platform::StopResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::energy_platform::StopRequest, ::energy_platform::StopResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetDataLocation<ExperimentalWithCallbackMethod_GetEnvDescription<ExperimentalWithCallbackMethod_SetCurrentTask<ExperimentalWithCallbackMethod_GetAllowedActions<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Stop<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetDataLocation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllowedActions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetDataLocation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDataLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvDescription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAllowedActions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllowedActions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDataLocation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetDataLocation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDataLocation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEnvDescription() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetEnvDescription(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvDescription(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCurrentTask() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetCurrentTask(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCurrentTask(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllowedActions() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAllowedActions(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllowedActions(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Reset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Step(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDataLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetDataLocation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::SetDataLocationRequest, ::energy_platform::SetDataLocationResponse>(std::bind(&WithStreamedUnaryMethod_SetDataLocation<BaseClass>::StreamedSetDataLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDataLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDataLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::SetDataLocationRequest,::energy_platform::SetDataLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::GetEnvDescriptionRequest, ::energy_platform::GetEnvDescriptionResponse>(std::bind(&WithStreamedUnaryMethod_GetEnvDescription<BaseClass>::StreamedGetEnvDescription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnvDescription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::GetEnvDescriptionRequest,::energy_platform::GetEnvDescriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::SetCurrentTaskRequest, ::energy_platform::SetCurrentTaskResponse>(std::bind(&WithStreamedUnaryMethod_SetCurrentTask<BaseClass>::StreamedSetCurrentTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCurrentTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::SetCurrentTaskRequest,::energy_platform::SetCurrentTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllowedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllowedActions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::AllowedActionsRequest, ::energy_platform::AllowedActionsResponse>(std::bind(&WithStreamedUnaryMethod_GetAllowedActions<BaseClass>::StreamedGetAllowedActions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllowedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllowedActions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::AllowedActionsRequest,::energy_platform::AllowedActionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::ResetRequest, ::energy_platform::ResetResponse>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::ResetRequest,::energy_platform::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::StepRequest, ::energy_platform::StepResponse>(std::bind(&WithStreamedUnaryMethod_Step<BaseClass>::StreamedStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::StepRequest,::energy_platform::StepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::energy_platform::StopRequest, ::energy_platform::StopResponse>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::energy_platform::StopRequest,::energy_platform::StopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetDataLocation<WithStreamedUnaryMethod_GetEnvDescription<WithStreamedUnaryMethod_SetCurrentTask<WithStreamedUnaryMethod_GetAllowedActions<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetDataLocation<WithStreamedUnaryMethod_GetEnvDescription<WithStreamedUnaryMethod_SetCurrentTask<WithStreamedUnaryMethod_GetAllowedActions<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedService;
};
//  Main class for all environments of the platform (gas system, energy system, industry infrastructure system, etc).
// Encapsulates the environment with arbitrary behind-the-scenes dynamics, which is governed by concrete virtual simulator.

}  // namespace energy_platform


#endif  // GRPC_Env_2eproto__INCLUDED
