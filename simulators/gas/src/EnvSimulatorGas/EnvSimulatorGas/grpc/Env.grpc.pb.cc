// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Env.proto

#include "pch.h"
#include "Env.pb.h"
#include "Env.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace energy_platform {

static const char* Env_method_names[] = {
  "/energy_platform.Env/SetDataLocation",
  "/energy_platform.Env/GetEnvDescription",
  "/energy_platform.Env/SetCurrentTask",
  "/energy_platform.Env/GetAllowedActions",
  "/energy_platform.Env/Reset",
  "/energy_platform.Env/Step",
  "/energy_platform.Env/Stop",
};

std::unique_ptr< Env::Stub> Env::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Env::Stub> stub(new Env::Stub(channel));
  return stub;
}

Env::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetDataLocation_(Env_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEnvDescription_(Env_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentTask_(Env_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllowedActions_(Env_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Env_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(Env_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Env_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Env::Stub::SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::energy_platform::SetDataLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDataLocation_, context, request, response);
}

void Env::Stub::experimental_async::SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDataLocation_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDataLocation_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::SetDataLocation(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDataLocation_, context, request, response, reactor);
}

void Env::Stub::experimental_async::SetDataLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetDataLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDataLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>* Env::Stub::AsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::SetDataLocationResponse>::Create(channel_.get(), cq, rpcmethod_SetDataLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::SetDataLocationResponse>* Env::Stub::PrepareAsyncSetDataLocationRaw(::grpc::ClientContext* context, const ::energy_platform::SetDataLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::SetDataLocationResponse>::Create(channel_.get(), cq, rpcmethod_SetDataLocation_, context, request, false);
}

::grpc::Status Env::Stub::GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::energy_platform::GetEnvDescriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnvDescription_, context, request, response);
}

void Env::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

void Env::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>* Env::Stub::AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::GetEnvDescriptionResponse>* Env::Stub::PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::energy_platform::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, false);
}

::grpc::Status Env::Stub::SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::energy_platform::SetCurrentTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentTask_, context, request, response);
}

void Env::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

void Env::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>* Env::Stub::AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::SetCurrentTaskResponse>* Env::Stub::PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::energy_platform::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, false);
}

::grpc::Status Env::Stub::GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::energy_platform::AllowedActionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllowedActions_, context, request, response);
}

void Env::Stub::experimental_async::GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllowedActions_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllowedActions_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::GetAllowedActions(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllowedActions_, context, request, response, reactor);
}

void Env::Stub::experimental_async::GetAllowedActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::AllowedActionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllowedActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>* Env::Stub::AsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::AllowedActionsResponse>::Create(channel_.get(), cq, rpcmethod_GetAllowedActions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::AllowedActionsResponse>* Env::Stub::PrepareAsyncGetAllowedActionsRaw(::grpc::ClientContext* context, const ::energy_platform::AllowedActionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::AllowedActionsResponse>::Create(channel_.get(), cq, rpcmethod_GetAllowedActions_, context, request, false);
}

::grpc::Status Env::Stub::Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::energy_platform::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Env::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void Env::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>* Env::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::ResetResponse>* Env::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::energy_platform::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status Env::Stub::Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::energy_platform::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Step_, context, request, response);
}

void Env::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

void Env::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>* Env::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::StepResponse>* Env::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::energy_platform::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, false);
}

::grpc::Status Env::Stub::Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::energy_platform::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void Env::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Env::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void Env::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::energy_platform::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>* Env::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::energy_platform::StopResponse>* Env::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::energy_platform::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::energy_platform::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

Env::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::SetDataLocationRequest, ::energy_platform::SetDataLocationResponse>(
          std::mem_fn(&Env::Service::SetDataLocation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::GetEnvDescriptionRequest, ::energy_platform::GetEnvDescriptionResponse>(
          std::mem_fn(&Env::Service::GetEnvDescription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::SetCurrentTaskRequest, ::energy_platform::SetCurrentTaskResponse>(
          std::mem_fn(&Env::Service::SetCurrentTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::AllowedActionsRequest, ::energy_platform::AllowedActionsResponse>(
          std::mem_fn(&Env::Service::GetAllowedActions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::ResetRequest, ::energy_platform::ResetResponse>(
          std::mem_fn(&Env::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::StepRequest, ::energy_platform::StepResponse>(
          std::mem_fn(&Env::Service::Step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Env_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Env::Service, ::energy_platform::StopRequest, ::energy_platform::StopResponse>(
          std::mem_fn(&Env::Service::Stop), this)));
}

Env::Service::~Service() {
}

::grpc::Status Env::Service::SetDataLocation(::grpc::ServerContext* context, const ::energy_platform::SetDataLocationRequest* request, ::energy_platform::SetDataLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::GetEnvDescription(::grpc::ServerContext* context, const ::energy_platform::GetEnvDescriptionRequest* request, ::energy_platform::GetEnvDescriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::SetCurrentTask(::grpc::ServerContext* context, const ::energy_platform::SetCurrentTaskRequest* request, ::energy_platform::SetCurrentTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::GetAllowedActions(::grpc::ServerContext* context, const ::energy_platform::AllowedActionsRequest* request, ::energy_platform::AllowedActionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::Reset(::grpc::ServerContext* context, const ::energy_platform::ResetRequest* request, ::energy_platform::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::Step(::grpc::ServerContext* context, const ::energy_platform::StepRequest* request, ::energy_platform::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Env::Service::Stop(::grpc::ServerContext* context, const ::energy_platform::StopRequest* request, ::energy_platform::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace energy_platform

