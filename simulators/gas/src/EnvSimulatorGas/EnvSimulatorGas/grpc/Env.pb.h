// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Env.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Env_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Env_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Env_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Env_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Env_2eproto;
namespace energy_platform {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AllowedActionsRequest;
class AllowedActionsRequestDefaultTypeInternal;
extern AllowedActionsRequestDefaultTypeInternal _AllowedActionsRequest_default_instance_;
class AllowedActionsResponse;
class AllowedActionsResponseDefaultTypeInternal;
extern AllowedActionsResponseDefaultTypeInternal _AllowedActionsResponse_default_instance_;
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeParams;
class EdgeParamsDefaultTypeInternal;
extern EdgeParamsDefaultTypeInternal _EdgeParams_default_instance_;
class GetEnvDescriptionRequest;
class GetEnvDescriptionRequestDefaultTypeInternal;
extern GetEnvDescriptionRequestDefaultTypeInternal _GetEnvDescriptionRequest_default_instance_;
class GetEnvDescriptionResponse;
class GetEnvDescriptionResponseDefaultTypeInternal;
extern GetEnvDescriptionResponseDefaultTypeInternal _GetEnvDescriptionResponse_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeParams;
class NodeParamsDefaultTypeInternal;
extern NodeParamsDefaultTypeInternal _NodeParams_default_instance_;
class Observation;
class ObservationDefaultTypeInternal;
extern ObservationDefaultTypeInternal _Observation_default_instance_;
class ResetRequest;
class ResetRequestDefaultTypeInternal;
extern ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
class ResetResponse;
class ResetResponseDefaultTypeInternal;
extern ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
class SetCurrentTaskRequest;
class SetCurrentTaskRequestDefaultTypeInternal;
extern SetCurrentTaskRequestDefaultTypeInternal _SetCurrentTaskRequest_default_instance_;
class SetCurrentTaskResponse;
class SetCurrentTaskResponseDefaultTypeInternal;
extern SetCurrentTaskResponseDefaultTypeInternal _SetCurrentTaskResponse_default_instance_;
class SetDataLocationRequest;
class SetDataLocationRequestDefaultTypeInternal;
extern SetDataLocationRequestDefaultTypeInternal _SetDataLocationRequest_default_instance_;
class SetDataLocationResponse;
class SetDataLocationResponseDefaultTypeInternal;
extern SetDataLocationResponseDefaultTypeInternal _SetDataLocationResponse_default_instance_;
class StepRequest;
class StepRequestDefaultTypeInternal;
extern StepRequestDefaultTypeInternal _StepRequest_default_instance_;
class StepResponse;
class StepResponseDefaultTypeInternal;
extern StepResponseDefaultTypeInternal _StepResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace energy_platform
PROTOBUF_NAMESPACE_OPEN
template<> ::energy_platform::Action* Arena::CreateMaybeMessage<::energy_platform::Action>(Arena*);
template<> ::energy_platform::AllowedActionsRequest* Arena::CreateMaybeMessage<::energy_platform::AllowedActionsRequest>(Arena*);
template<> ::energy_platform::AllowedActionsResponse* Arena::CreateMaybeMessage<::energy_platform::AllowedActionsResponse>(Arena*);
template<> ::energy_platform::Edge* Arena::CreateMaybeMessage<::energy_platform::Edge>(Arena*);
template<> ::energy_platform::EdgeParams* Arena::CreateMaybeMessage<::energy_platform::EdgeParams>(Arena*);
template<> ::energy_platform::GetEnvDescriptionRequest* Arena::CreateMaybeMessage<::energy_platform::GetEnvDescriptionRequest>(Arena*);
template<> ::energy_platform::GetEnvDescriptionResponse* Arena::CreateMaybeMessage<::energy_platform::GetEnvDescriptionResponse>(Arena*);
template<> ::energy_platform::Node* Arena::CreateMaybeMessage<::energy_platform::Node>(Arena*);
template<> ::energy_platform::NodeParams* Arena::CreateMaybeMessage<::energy_platform::NodeParams>(Arena*);
template<> ::energy_platform::Observation* Arena::CreateMaybeMessage<::energy_platform::Observation>(Arena*);
template<> ::energy_platform::ResetRequest* Arena::CreateMaybeMessage<::energy_platform::ResetRequest>(Arena*);
template<> ::energy_platform::ResetResponse* Arena::CreateMaybeMessage<::energy_platform::ResetResponse>(Arena*);
template<> ::energy_platform::SetCurrentTaskRequest* Arena::CreateMaybeMessage<::energy_platform::SetCurrentTaskRequest>(Arena*);
template<> ::energy_platform::SetCurrentTaskResponse* Arena::CreateMaybeMessage<::energy_platform::SetCurrentTaskResponse>(Arena*);
template<> ::energy_platform::SetDataLocationRequest* Arena::CreateMaybeMessage<::energy_platform::SetDataLocationRequest>(Arena*);
template<> ::energy_platform::SetDataLocationResponse* Arena::CreateMaybeMessage<::energy_platform::SetDataLocationResponse>(Arena*);
template<> ::energy_platform::StepRequest* Arena::CreateMaybeMessage<::energy_platform::StepRequest>(Arena*);
template<> ::energy_platform::StepResponse* Arena::CreateMaybeMessage<::energy_platform::StepResponse>(Arena*);
template<> ::energy_platform::StopRequest* Arena::CreateMaybeMessage<::energy_platform::StopRequest>(Arena*);
template<> ::energy_platform::StopResponse* Arena::CreateMaybeMessage<::energy_platform::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace energy_platform {

enum NodeParams_ParamType : int {
  NodeParams_ParamType_P = 0,
  NodeParams_ParamType_T = 1,
  NodeParams_ParamType_NodeParams_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeParams_ParamType_NodeParams_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeParams_ParamType_IsValid(int value);
constexpr NodeParams_ParamType NodeParams_ParamType_ParamType_MIN = NodeParams_ParamType_P;
constexpr NodeParams_ParamType NodeParams_ParamType_ParamType_MAX = NodeParams_ParamType_T;
constexpr int NodeParams_ParamType_ParamType_ARRAYSIZE = NodeParams_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeParams_ParamType_descriptor();
template<typename T>
inline const std::string& NodeParams_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeParams_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeParams_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeParams_ParamType_descriptor(), enum_t_value);
}
inline bool NodeParams_ParamType_Parse(
    const std::string& name, NodeParams_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeParams_ParamType>(
    NodeParams_ParamType_descriptor(), name, value);
}
enum EdgeParams_ParamType : int {
  EdgeParams_ParamType_Q = 0,
  EdgeParams_ParamType_EdgeParams_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EdgeParams_ParamType_EdgeParams_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EdgeParams_ParamType_IsValid(int value);
constexpr EdgeParams_ParamType EdgeParams_ParamType_ParamType_MIN = EdgeParams_ParamType_Q;
constexpr EdgeParams_ParamType EdgeParams_ParamType_ParamType_MAX = EdgeParams_ParamType_Q;
constexpr int EdgeParams_ParamType_ParamType_ARRAYSIZE = EdgeParams_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgeParams_ParamType_descriptor();
template<typename T>
inline const std::string& EdgeParams_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdgeParams_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdgeParams_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdgeParams_ParamType_descriptor(), enum_t_value);
}
inline bool EdgeParams_ParamType_Parse(
    const std::string& name, EdgeParams_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdgeParams_ParamType>(
    EdgeParams_ParamType_descriptor(), name, value);
}
enum ResetResponse_ResetStatus : int {
  ResetResponse_ResetStatus_READY_TO_SIMULATE = 0,
  ResetResponse_ResetStatus_RESET_FAILED = 1,
  ResetResponse_ResetStatus_ResetResponse_ResetStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResetResponse_ResetStatus_ResetResponse_ResetStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResetResponse_ResetStatus_IsValid(int value);
constexpr ResetResponse_ResetStatus ResetResponse_ResetStatus_ResetStatus_MIN = ResetResponse_ResetStatus_READY_TO_SIMULATE;
constexpr ResetResponse_ResetStatus ResetResponse_ResetStatus_ResetStatus_MAX = ResetResponse_ResetStatus_RESET_FAILED;
constexpr int ResetResponse_ResetStatus_ResetStatus_ARRAYSIZE = ResetResponse_ResetStatus_ResetStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetResponse_ResetStatus_descriptor();
template<typename T>
inline const std::string& ResetResponse_ResetStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResetResponse_ResetStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResetResponse_ResetStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResetResponse_ResetStatus_descriptor(), enum_t_value);
}
inline bool ResetResponse_ResetStatus_Parse(
    const std::string& name, ResetResponse_ResetStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResetResponse_ResetStatus>(
    ResetResponse_ResetStatus_descriptor(), name, value);
}
enum SetDataLocationResponse_LoadDataStatus : int {
  SetDataLocationResponse_LoadDataStatus_OK = 0,
  SetDataLocationResponse_LoadDataStatus_FAILED = 1,
  SetDataLocationResponse_LoadDataStatus_SetDataLocationResponse_LoadDataStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetDataLocationResponse_LoadDataStatus_SetDataLocationResponse_LoadDataStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetDataLocationResponse_LoadDataStatus_IsValid(int value);
constexpr SetDataLocationResponse_LoadDataStatus SetDataLocationResponse_LoadDataStatus_LoadDataStatus_MIN = SetDataLocationResponse_LoadDataStatus_OK;
constexpr SetDataLocationResponse_LoadDataStatus SetDataLocationResponse_LoadDataStatus_LoadDataStatus_MAX = SetDataLocationResponse_LoadDataStatus_FAILED;
constexpr int SetDataLocationResponse_LoadDataStatus_LoadDataStatus_ARRAYSIZE = SetDataLocationResponse_LoadDataStatus_LoadDataStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetDataLocationResponse_LoadDataStatus_descriptor();
template<typename T>
inline const std::string& SetDataLocationResponse_LoadDataStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetDataLocationResponse_LoadDataStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetDataLocationResponse_LoadDataStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetDataLocationResponse_LoadDataStatus_descriptor(), enum_t_value);
}
inline bool SetDataLocationResponse_LoadDataStatus_Parse(
    const std::string& name, SetDataLocationResponse_LoadDataStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetDataLocationResponse_LoadDataStatus>(
    SetDataLocationResponse_LoadDataStatus_descriptor(), name, value);
}
enum Task : int {
  UNDEFINED = 0,
  FEED_FORWARD = 1,
  AVAILABLE_TECHNOLOGICAL_MODE = 2,
  MAX_THROUGHPUT = 3,
  SIMPLE = 4,
  Task_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Task_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Task_IsValid(int value);
constexpr Task Task_MIN = UNDEFINED;
constexpr Task Task_MAX = SIMPLE;
constexpr int Task_ARRAYSIZE = Task_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_descriptor();
template<typename T>
inline const std::string& Task_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_descriptor(), enum_t_value);
}
inline bool Task_Parse(
    const std::string& name, Task* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task>(
    Task_descriptor(), name, value);
}
// ===================================================================

class NodeParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.NodeParams) */ {
 public:
  NodeParams();
  virtual ~NodeParams();

  NodeParams(const NodeParams& from);
  NodeParams(NodeParams&& from) noexcept
    : NodeParams() {
    *this = ::std::move(from);
  }

  inline NodeParams& operator=(const NodeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeParams& operator=(NodeParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeParams* internal_default_instance() {
    return reinterpret_cast<const NodeParams*>(
               &_NodeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeParams& a, NodeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeParams* New() const final {
    return CreateMaybeMessage<NodeParams>(nullptr);
  }

  NodeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeParams& from);
  void MergeFrom(const NodeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.NodeParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NodeParams_ParamType ParamType;
  static constexpr ParamType P =
    NodeParams_ParamType_P;
  static constexpr ParamType T =
    NodeParams_ParamType_T;
  static inline bool ParamType_IsValid(int value) {
    return NodeParams_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    NodeParams_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    NodeParams_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    NodeParams_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return NodeParams_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return NodeParams_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(const std::string& name,
      ParamType* value) {
    return NodeParams_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamTypeFieldNumber = 1,
    kParamValueFieldNumber = 2,
  };
  // .energy_platform.NodeParams.ParamType param_type = 1;
  void clear_param_type();
  ::energy_platform::NodeParams_ParamType param_type() const;
  void set_param_type(::energy_platform::NodeParams_ParamType value);

  // float param_value = 2;
  void clear_param_value();
  float param_value() const;
  void set_param_value(float value);

  // @@protoc_insertion_point(class_scope:energy_platform.NodeParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int param_type_;
  float param_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class EdgeParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.EdgeParams) */ {
 public:
  EdgeParams();
  virtual ~EdgeParams();

  EdgeParams(const EdgeParams& from);
  EdgeParams(EdgeParams&& from) noexcept
    : EdgeParams() {
    *this = ::std::move(from);
  }

  inline EdgeParams& operator=(const EdgeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeParams& operator=(EdgeParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeParams* internal_default_instance() {
    return reinterpret_cast<const EdgeParams*>(
               &_EdgeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EdgeParams& a, EdgeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeParams* New() const final {
    return CreateMaybeMessage<EdgeParams>(nullptr);
  }

  EdgeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeParams& from);
  void MergeFrom(const EdgeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.EdgeParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EdgeParams_ParamType ParamType;
  static constexpr ParamType Q =
    EdgeParams_ParamType_Q;
  static inline bool ParamType_IsValid(int value) {
    return EdgeParams_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    EdgeParams_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    EdgeParams_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    EdgeParams_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return EdgeParams_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return EdgeParams_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(const std::string& name,
      ParamType* value) {
    return EdgeParams_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamTypeFieldNumber = 1,
    kParamValueFieldNumber = 2,
  };
  // .energy_platform.EdgeParams.ParamType param_type = 1;
  void clear_param_type();
  ::energy_platform::EdgeParams_ParamType param_type() const;
  void set_param_type(::energy_platform::EdgeParams_ParamType value);

  // float param_value = 2;
  void clear_param_value();
  float param_value() const;
  void set_param_value(float value);

  // @@protoc_insertion_point(class_scope:energy_platform.EdgeParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int param_type_;
  float param_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeParamsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .energy_platform.NodeParams node_params = 2;
  int node_params_size() const;
  void clear_node_params();
  ::energy_platform::NodeParams* mutable_node_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::NodeParams >*
      mutable_node_params();
  const ::energy_platform::NodeParams& node_params(int index) const;
  ::energy_platform::NodeParams* add_node_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::NodeParams >&
      node_params() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:energy_platform.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::NodeParams > node_params_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class Edge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.Edge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeParamsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .energy_platform.EdgeParams edge_params = 2;
  int edge_params_size() const;
  void clear_edge_params();
  ::energy_platform::EdgeParams* mutable_edge_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::EdgeParams >*
      mutable_edge_params();
  const ::energy_platform::EdgeParams& edge_params(int index) const;
  ::energy_platform::EdgeParams* add_edge_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::EdgeParams >&
      edge_params() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:energy_platform.Edge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::EdgeParams > edge_params_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class Observation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.Observation) */ {
 public:
  Observation();
  virtual ~Observation();

  Observation(const Observation& from);
  Observation(Observation&& from) noexcept
    : Observation() {
    *this = ::std::move(from);
  }

  inline Observation& operator=(const Observation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Observation& operator=(Observation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Observation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Observation* internal_default_instance() {
    return reinterpret_cast<const Observation*>(
               &_Observation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Observation& a, Observation& b) {
    a.Swap(&b);
  }
  inline void Swap(Observation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Observation* New() const final {
    return CreateMaybeMessage<Observation>(nullptr);
  }

  Observation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Observation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Observation& from);
  void MergeFrom(const Observation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Observation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.Observation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };
  // repeated .energy_platform.Node nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  ::energy_platform::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Node >*
      mutable_nodes();
  const ::energy_platform::Node& nodes(int index) const;
  ::energy_platform::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Node >&
      nodes() const;

  // repeated .energy_platform.Edge edges = 2;
  int edges_size() const;
  void clear_edges();
  ::energy_platform::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Edge >*
      mutable_edges();
  const ::energy_platform::Edge& edges(int index) const;
  ::energy_platform::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Edge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:energy_platform.Observation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Edge > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  enum ActionValueCase {
    kFloatValue = 2,
    kIntValue = 3,
    ACTION_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kInfoFieldNumber = 4,
    kFloatValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);

  // string info = 4;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // float float_value = 2;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);

  // int64 int_value = 3;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  void clear_action_value();
  ActionValueCase action_value_case() const;
  // @@protoc_insertion_point(class_scope:energy_platform.Action)
 private:
  class _Internal;
  void set_has_float_value();
  void set_has_int_value();

  inline bool has_action_value() const;
  inline void clear_has_action_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  union ActionValueUnion {
    ActionValueUnion() {}
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
  } action_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class AllowedActionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.AllowedActionsRequest) */ {
 public:
  AllowedActionsRequest();
  virtual ~AllowedActionsRequest();

  AllowedActionsRequest(const AllowedActionsRequest& from);
  AllowedActionsRequest(AllowedActionsRequest&& from) noexcept
    : AllowedActionsRequest() {
    *this = ::std::move(from);
  }

  inline AllowedActionsRequest& operator=(const AllowedActionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedActionsRequest& operator=(AllowedActionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllowedActionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowedActionsRequest* internal_default_instance() {
    return reinterpret_cast<const AllowedActionsRequest*>(
               &_AllowedActionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AllowedActionsRequest& a, AllowedActionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedActionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowedActionsRequest* New() const final {
    return CreateMaybeMessage<AllowedActionsRequest>(nullptr);
  }

  AllowedActionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowedActionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllowedActionsRequest& from);
  void MergeFrom(const AllowedActionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedActionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.AllowedActionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.AllowedActionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class AllowedActionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.AllowedActionsResponse) */ {
 public:
  AllowedActionsResponse();
  virtual ~AllowedActionsResponse();

  AllowedActionsResponse(const AllowedActionsResponse& from);
  AllowedActionsResponse(AllowedActionsResponse&& from) noexcept
    : AllowedActionsResponse() {
    *this = ::std::move(from);
  }

  inline AllowedActionsResponse& operator=(const AllowedActionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedActionsResponse& operator=(AllowedActionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllowedActionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowedActionsResponse* internal_default_instance() {
    return reinterpret_cast<const AllowedActionsResponse*>(
               &_AllowedActionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AllowedActionsResponse& a, AllowedActionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedActionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowedActionsResponse* New() const final {
    return CreateMaybeMessage<AllowedActionsResponse>(nullptr);
  }

  AllowedActionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowedActionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllowedActionsResponse& from);
  void MergeFrom(const AllowedActionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedActionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.AllowedActionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .energy_platform.Action actions = 1;
  int actions_size() const;
  void clear_actions();
  ::energy_platform::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >*
      mutable_actions();
  const ::energy_platform::Action& actions(int index) const;
  ::energy_platform::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >&
      actions() const;

  // @@protoc_insertion_point(class_scope:energy_platform.AllowedActionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class ResetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.ResetRequest) */ {
 public:
  ResetRequest();
  virtual ~ResetRequest();

  ResetRequest(const ResetRequest& from);
  ResetRequest(ResetRequest&& from) noexcept
    : ResetRequest() {
    *this = ::std::move(from);
  }

  inline ResetRequest& operator=(const ResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetRequest& operator=(ResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRequest*>(
               &_ResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResetRequest& a, ResetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetRequest* New() const final {
    return CreateMaybeMessage<ResetRequest>(nullptr);
  }

  ResetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetRequest& from);
  void MergeFrom(const ResetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.ResetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.ResetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class ResetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.ResetResponse) */ {
 public:
  ResetResponse();
  virtual ~ResetResponse();

  ResetResponse(const ResetResponse& from);
  ResetResponse(ResetResponse&& from) noexcept
    : ResetResponse() {
    *this = ::std::move(from);
  }

  inline ResetResponse& operator=(const ResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetResponse& operator=(ResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetResponse* internal_default_instance() {
    return reinterpret_cast<const ResetResponse*>(
               &_ResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResetResponse& a, ResetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetResponse* New() const final {
    return CreateMaybeMessage<ResetResponse>(nullptr);
  }

  ResetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetResponse& from);
  void MergeFrom(const ResetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.ResetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetResponse_ResetStatus ResetStatus;
  static constexpr ResetStatus READY_TO_SIMULATE =
    ResetResponse_ResetStatus_READY_TO_SIMULATE;
  static constexpr ResetStatus RESET_FAILED =
    ResetResponse_ResetStatus_RESET_FAILED;
  static inline bool ResetStatus_IsValid(int value) {
    return ResetResponse_ResetStatus_IsValid(value);
  }
  static constexpr ResetStatus ResetStatus_MIN =
    ResetResponse_ResetStatus_ResetStatus_MIN;
  static constexpr ResetStatus ResetStatus_MAX =
    ResetResponse_ResetStatus_ResetStatus_MAX;
  static constexpr int ResetStatus_ARRAYSIZE =
    ResetResponse_ResetStatus_ResetStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResetStatus_descriptor() {
    return ResetResponse_ResetStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ResetStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResetStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResetStatus_Name.");
    return ResetResponse_ResetStatus_Name(enum_t_value);
  }
  static inline bool ResetStatus_Parse(const std::string& name,
      ResetStatus* value) {
    return ResetResponse_ResetStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResetInfoFieldNumber = 3,
    kObservationFieldNumber = 2,
    kResetStatusFieldNumber = 1,
  };
  // string reset_info = 3;
  void clear_reset_info();
  const std::string& reset_info() const;
  void set_reset_info(const std::string& value);
  void set_reset_info(std::string&& value);
  void set_reset_info(const char* value);
  void set_reset_info(const char* value, size_t size);
  std::string* mutable_reset_info();
  std::string* release_reset_info();
  void set_allocated_reset_info(std::string* reset_info);

  // .energy_platform.Observation observation = 2;
  bool has_observation() const;
  void clear_observation();
  const ::energy_platform::Observation& observation() const;
  ::energy_platform::Observation* release_observation();
  ::energy_platform::Observation* mutable_observation();
  void set_allocated_observation(::energy_platform::Observation* observation);

  // .energy_platform.ResetResponse.ResetStatus reset_status = 1;
  void clear_reset_status();
  ::energy_platform::ResetResponse_ResetStatus reset_status() const;
  void set_reset_status(::energy_platform::ResetResponse_ResetStatus value);

  // @@protoc_insertion_point(class_scope:energy_platform.ResetResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_info_;
  ::energy_platform::Observation* observation_;
  int reset_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class StepRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.StepRequest) */ {
 public:
  StepRequest();
  virtual ~StepRequest();

  StepRequest(const StepRequest& from);
  StepRequest(StepRequest&& from) noexcept
    : StepRequest() {
    *this = ::std::move(from);
  }

  inline StepRequest& operator=(const StepRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepRequest& operator=(StepRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepRequest* internal_default_instance() {
    return reinterpret_cast<const StepRequest*>(
               &_StepRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StepRequest& a, StepRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StepRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepRequest* New() const final {
    return CreateMaybeMessage<StepRequest>(nullptr);
  }

  StepRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepRequest& from);
  void MergeFrom(const StepRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.StepRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .energy_platform.Action actions = 1;
  int actions_size() const;
  void clear_actions();
  ::energy_platform::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >*
      mutable_actions();
  const ::energy_platform::Action& actions(int index) const;
  ::energy_platform::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >&
      actions() const;

  // @@protoc_insertion_point(class_scope:energy_platform.StepRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class StepResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.StepResponse) */ {
 public:
  StepResponse();
  virtual ~StepResponse();

  StepResponse(const StepResponse& from);
  StepResponse(StepResponse&& from) noexcept
    : StepResponse() {
    *this = ::std::move(from);
  }

  inline StepResponse& operator=(const StepResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepResponse& operator=(StepResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepResponse* internal_default_instance() {
    return reinterpret_cast<const StepResponse*>(
               &_StepResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StepResponse& a, StepResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StepResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepResponse* New() const final {
    return CreateMaybeMessage<StepResponse>(nullptr);
  }

  StepResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepResponse& from);
  void MergeFrom(const StepResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.StepResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 4,
    kObservationFieldNumber = 1,
    kRewardFieldNumber = 2,
    kDoneFieldNumber = 3,
  };
  // string info = 4;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // .energy_platform.Observation observation = 1;
  bool has_observation() const;
  void clear_observation();
  const ::energy_platform::Observation& observation() const;
  ::energy_platform::Observation* release_observation();
  ::energy_platform::Observation* mutable_observation();
  void set_allocated_observation(::energy_platform::Observation* observation);

  // float reward = 2;
  void clear_reward();
  float reward() const;
  void set_reward(float value);

  // bool done = 3;
  void clear_done();
  bool done() const;
  void set_done(bool value);

  // @@protoc_insertion_point(class_scope:energy_platform.StepResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::energy_platform::Observation* observation_;
  float reward_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class StopRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.StopRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.StopRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class StopResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.StopResponse) */ {
 public:
  StopResponse();
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.StopResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.StopResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class SetDataLocationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.SetDataLocationRequest) */ {
 public:
  SetDataLocationRequest();
  virtual ~SetDataLocationRequest();

  SetDataLocationRequest(const SetDataLocationRequest& from);
  SetDataLocationRequest(SetDataLocationRequest&& from) noexcept
    : SetDataLocationRequest() {
    *this = ::std::move(from);
  }

  inline SetDataLocationRequest& operator=(const SetDataLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDataLocationRequest& operator=(SetDataLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDataLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDataLocationRequest* internal_default_instance() {
    return reinterpret_cast<const SetDataLocationRequest*>(
               &_SetDataLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetDataLocationRequest& a, SetDataLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDataLocationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDataLocationRequest* New() const final {
    return CreateMaybeMessage<SetDataLocationRequest>(nullptr);
  }

  SetDataLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDataLocationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDataLocationRequest& from);
  void MergeFrom(const SetDataLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDataLocationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.SetDataLocationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPathFieldNumber = 1,
  };
  // string data_path = 1;
  void clear_data_path();
  const std::string& data_path() const;
  void set_data_path(const std::string& value);
  void set_data_path(std::string&& value);
  void set_data_path(const char* value);
  void set_data_path(const char* value, size_t size);
  std::string* mutable_data_path();
  std::string* release_data_path();
  void set_allocated_data_path(std::string* data_path);

  // @@protoc_insertion_point(class_scope:energy_platform.SetDataLocationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class SetDataLocationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.SetDataLocationResponse) */ {
 public:
  SetDataLocationResponse();
  virtual ~SetDataLocationResponse();

  SetDataLocationResponse(const SetDataLocationResponse& from);
  SetDataLocationResponse(SetDataLocationResponse&& from) noexcept
    : SetDataLocationResponse() {
    *this = ::std::move(from);
  }

  inline SetDataLocationResponse& operator=(const SetDataLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDataLocationResponse& operator=(SetDataLocationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDataLocationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDataLocationResponse* internal_default_instance() {
    return reinterpret_cast<const SetDataLocationResponse*>(
               &_SetDataLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetDataLocationResponse& a, SetDataLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDataLocationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDataLocationResponse* New() const final {
    return CreateMaybeMessage<SetDataLocationResponse>(nullptr);
  }

  SetDataLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDataLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDataLocationResponse& from);
  void MergeFrom(const SetDataLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDataLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.SetDataLocationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetDataLocationResponse_LoadDataStatus LoadDataStatus;
  static constexpr LoadDataStatus OK =
    SetDataLocationResponse_LoadDataStatus_OK;
  static constexpr LoadDataStatus FAILED =
    SetDataLocationResponse_LoadDataStatus_FAILED;
  static inline bool LoadDataStatus_IsValid(int value) {
    return SetDataLocationResponse_LoadDataStatus_IsValid(value);
  }
  static constexpr LoadDataStatus LoadDataStatus_MIN =
    SetDataLocationResponse_LoadDataStatus_LoadDataStatus_MIN;
  static constexpr LoadDataStatus LoadDataStatus_MAX =
    SetDataLocationResponse_LoadDataStatus_LoadDataStatus_MAX;
  static constexpr int LoadDataStatus_ARRAYSIZE =
    SetDataLocationResponse_LoadDataStatus_LoadDataStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoadDataStatus_descriptor() {
    return SetDataLocationResponse_LoadDataStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& LoadDataStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoadDataStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoadDataStatus_Name.");
    return SetDataLocationResponse_LoadDataStatus_Name(enum_t_value);
  }
  static inline bool LoadDataStatus_Parse(const std::string& name,
      LoadDataStatus* value) {
    return SetDataLocationResponse_LoadDataStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // .energy_platform.SetDataLocationResponse.LoadDataStatus status = 1;
  void clear_status();
  ::energy_platform::SetDataLocationResponse_LoadDataStatus status() const;
  void set_status(::energy_platform::SetDataLocationResponse_LoadDataStatus value);

  // @@protoc_insertion_point(class_scope:energy_platform.SetDataLocationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.SetCurrentTaskRequest) */ {
 public:
  SetCurrentTaskRequest();
  virtual ~SetCurrentTaskRequest();

  SetCurrentTaskRequest(const SetCurrentTaskRequest& from);
  SetCurrentTaskRequest(SetCurrentTaskRequest&& from) noexcept
    : SetCurrentTaskRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentTaskRequest& operator=(const SetCurrentTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentTaskRequest& operator=(SetCurrentTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentTaskRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentTaskRequest*>(
               &_SetCurrentTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetCurrentTaskRequest& a, SetCurrentTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentTaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentTaskRequest* New() const final {
    return CreateMaybeMessage<SetCurrentTaskRequest>(nullptr);
  }

  SetCurrentTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentTaskRequest& from);
  void MergeFrom(const SetCurrentTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.SetCurrentTaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTaskFieldNumber = 1,
  };
  // .energy_platform.Task current_task = 1;
  void clear_current_task();
  ::energy_platform::Task current_task() const;
  void set_current_task(::energy_platform::Task value);

  // @@protoc_insertion_point(class_scope:energy_platform.SetCurrentTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int current_task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.SetCurrentTaskResponse) */ {
 public:
  SetCurrentTaskResponse();
  virtual ~SetCurrentTaskResponse();

  SetCurrentTaskResponse(const SetCurrentTaskResponse& from);
  SetCurrentTaskResponse(SetCurrentTaskResponse&& from) noexcept
    : SetCurrentTaskResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentTaskResponse& operator=(const SetCurrentTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentTaskResponse& operator=(SetCurrentTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentTaskResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentTaskResponse*>(
               &_SetCurrentTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetCurrentTaskResponse& a, SetCurrentTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentTaskResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentTaskResponse* New() const final {
    return CreateMaybeMessage<SetCurrentTaskResponse>(nullptr);
  }

  SetCurrentTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentTaskResponse& from);
  void MergeFrom(const SetCurrentTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.SetCurrentTaskResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.SetCurrentTaskResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class GetEnvDescriptionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.GetEnvDescriptionRequest) */ {
 public:
  GetEnvDescriptionRequest();
  virtual ~GetEnvDescriptionRequest();

  GetEnvDescriptionRequest(const GetEnvDescriptionRequest& from);
  GetEnvDescriptionRequest(GetEnvDescriptionRequest&& from) noexcept
    : GetEnvDescriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetEnvDescriptionRequest& operator=(const GetEnvDescriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEnvDescriptionRequest& operator=(GetEnvDescriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEnvDescriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEnvDescriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetEnvDescriptionRequest*>(
               &_GetEnvDescriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetEnvDescriptionRequest& a, GetEnvDescriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEnvDescriptionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEnvDescriptionRequest* New() const final {
    return CreateMaybeMessage<GetEnvDescriptionRequest>(nullptr);
  }

  GetEnvDescriptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEnvDescriptionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEnvDescriptionRequest& from);
  void MergeFrom(const GetEnvDescriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEnvDescriptionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.GetEnvDescriptionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:energy_platform.GetEnvDescriptionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// -------------------------------------------------------------------

class GetEnvDescriptionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:energy_platform.GetEnvDescriptionResponse) */ {
 public:
  GetEnvDescriptionResponse();
  virtual ~GetEnvDescriptionResponse();

  GetEnvDescriptionResponse(const GetEnvDescriptionResponse& from);
  GetEnvDescriptionResponse(GetEnvDescriptionResponse&& from) noexcept
    : GetEnvDescriptionResponse() {
    *this = ::std::move(from);
  }

  inline GetEnvDescriptionResponse& operator=(const GetEnvDescriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEnvDescriptionResponse& operator=(GetEnvDescriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEnvDescriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEnvDescriptionResponse* internal_default_instance() {
    return reinterpret_cast<const GetEnvDescriptionResponse*>(
               &_GetEnvDescriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetEnvDescriptionResponse& a, GetEnvDescriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEnvDescriptionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEnvDescriptionResponse* New() const final {
    return CreateMaybeMessage<GetEnvDescriptionResponse>(nullptr);
  }

  GetEnvDescriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEnvDescriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEnvDescriptionResponse& from);
  void MergeFrom(const GetEnvDescriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEnvDescriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "energy_platform.GetEnvDescriptionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Env_2eproto);
    return ::descriptor_table_Env_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionDimFieldNumber = 1,
    kObservationDimFieldNumber = 2,
    kIsDiscreteFieldNumber = 3,
    kLowActionValueFieldNumber = 4,
    kHighActionValueFieldNumber = 5,
    kDiscreteActionDimensionFieldNumber = 6,
    kLowObservationValueFieldNumber = 7,
    kHighObservationValueFieldNumber = 8,
  };
  // int32 action_dim = 1;
  void clear_action_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 action_dim() const;
  void set_action_dim(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 observation_dim = 2;
  void clear_observation_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 observation_dim() const;
  void set_observation_dim(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_discrete = 3;
  void clear_is_discrete();
  bool is_discrete() const;
  void set_is_discrete(bool value);

  // float low_action_value = 4;
  void clear_low_action_value();
  float low_action_value() const;
  void set_low_action_value(float value);

  // float high_action_value = 5;
  void clear_high_action_value();
  float high_action_value() const;
  void set_high_action_value(float value);

  // int32 discrete_action_dimension = 6;
  void clear_discrete_action_dimension();
  ::PROTOBUF_NAMESPACE_ID::int32 discrete_action_dimension() const;
  void set_discrete_action_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float low_observation_value = 7;
  void clear_low_observation_value();
  float low_observation_value() const;
  void set_low_observation_value(float value);

  // float high_observation_value = 8;
  void clear_high_observation_value();
  float high_observation_value() const;
  void set_high_observation_value(float value);

  // @@protoc_insertion_point(class_scope:energy_platform.GetEnvDescriptionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 observation_dim_;
  bool is_discrete_;
  float low_action_value_;
  float high_action_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 discrete_action_dimension_;
  float low_observation_value_;
  float high_observation_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Env_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeParams

// .energy_platform.NodeParams.ParamType param_type = 1;
inline void NodeParams::clear_param_type() {
  param_type_ = 0;
}
inline ::energy_platform::NodeParams_ParamType NodeParams::param_type() const {
  // @@protoc_insertion_point(field_get:energy_platform.NodeParams.param_type)
  return static_cast< ::energy_platform::NodeParams_ParamType >(param_type_);
}
inline void NodeParams::set_param_type(::energy_platform::NodeParams_ParamType value) {
  
  param_type_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.NodeParams.param_type)
}

// float param_value = 2;
inline void NodeParams::clear_param_value() {
  param_value_ = 0;
}
inline float NodeParams::param_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.NodeParams.param_value)
  return param_value_;
}
inline void NodeParams::set_param_value(float value) {
  
  param_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.NodeParams.param_value)
}

// -------------------------------------------------------------------

// EdgeParams

// .energy_platform.EdgeParams.ParamType param_type = 1;
inline void EdgeParams::clear_param_type() {
  param_type_ = 0;
}
inline ::energy_platform::EdgeParams_ParamType EdgeParams::param_type() const {
  // @@protoc_insertion_point(field_get:energy_platform.EdgeParams.param_type)
  return static_cast< ::energy_platform::EdgeParams_ParamType >(param_type_);
}
inline void EdgeParams::set_param_type(::energy_platform::EdgeParams_ParamType value) {
  
  param_type_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.EdgeParams.param_type)
}

// float param_value = 2;
inline void EdgeParams::clear_param_value() {
  param_value_ = 0;
}
inline float EdgeParams::param_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.EdgeParams.param_value)
  return param_value_;
}
inline void EdgeParams::set_param_value(float value) {
  
  param_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.EdgeParams.param_value)
}

// -------------------------------------------------------------------

// Node

// int32 uid = 1;
inline void Node::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::uid() const {
  // @@protoc_insertion_point(field_get:energy_platform.Node.uid)
  return uid_;
}
inline void Node::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.Node.uid)
}

// repeated .energy_platform.NodeParams node_params = 2;
inline int Node::node_params_size() const {
  return node_params_.size();
}
inline void Node::clear_node_params() {
  node_params_.Clear();
}
inline ::energy_platform::NodeParams* Node::mutable_node_params(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.Node.node_params)
  return node_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::NodeParams >*
Node::mutable_node_params() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.Node.node_params)
  return &node_params_;
}
inline const ::energy_platform::NodeParams& Node::node_params(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.Node.node_params)
  return node_params_.Get(index);
}
inline ::energy_platform::NodeParams* Node::add_node_params() {
  // @@protoc_insertion_point(field_add:energy_platform.Node.node_params)
  return node_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::NodeParams >&
Node::node_params() const {
  // @@protoc_insertion_point(field_list:energy_platform.Node.node_params)
  return node_params_;
}

// -------------------------------------------------------------------

// Edge

// int32 uid = 1;
inline void Edge::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Edge::uid() const {
  // @@protoc_insertion_point(field_get:energy_platform.Edge.uid)
  return uid_;
}
inline void Edge::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.Edge.uid)
}

// repeated .energy_platform.EdgeParams edge_params = 2;
inline int Edge::edge_params_size() const {
  return edge_params_.size();
}
inline void Edge::clear_edge_params() {
  edge_params_.Clear();
}
inline ::energy_platform::EdgeParams* Edge::mutable_edge_params(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.Edge.edge_params)
  return edge_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::EdgeParams >*
Edge::mutable_edge_params() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.Edge.edge_params)
  return &edge_params_;
}
inline const ::energy_platform::EdgeParams& Edge::edge_params(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.Edge.edge_params)
  return edge_params_.Get(index);
}
inline ::energy_platform::EdgeParams* Edge::add_edge_params() {
  // @@protoc_insertion_point(field_add:energy_platform.Edge.edge_params)
  return edge_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::EdgeParams >&
Edge::edge_params() const {
  // @@protoc_insertion_point(field_list:energy_platform.Edge.edge_params)
  return edge_params_;
}

// -------------------------------------------------------------------

// Observation

// repeated .energy_platform.Node nodes = 1;
inline int Observation::nodes_size() const {
  return nodes_.size();
}
inline void Observation::clear_nodes() {
  nodes_.Clear();
}
inline ::energy_platform::Node* Observation::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.Observation.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Node >*
Observation::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.Observation.nodes)
  return &nodes_;
}
inline const ::energy_platform::Node& Observation::nodes(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.Observation.nodes)
  return nodes_.Get(index);
}
inline ::energy_platform::Node* Observation::add_nodes() {
  // @@protoc_insertion_point(field_add:energy_platform.Observation.nodes)
  return nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Node >&
Observation::nodes() const {
  // @@protoc_insertion_point(field_list:energy_platform.Observation.nodes)
  return nodes_;
}

// repeated .energy_platform.Edge edges = 2;
inline int Observation::edges_size() const {
  return edges_.size();
}
inline void Observation::clear_edges() {
  edges_.Clear();
}
inline ::energy_platform::Edge* Observation::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.Observation.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Edge >*
Observation::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.Observation.edges)
  return &edges_;
}
inline const ::energy_platform::Edge& Observation::edges(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.Observation.edges)
  return edges_.Get(index);
}
inline ::energy_platform::Edge* Observation::add_edges() {
  // @@protoc_insertion_point(field_add:energy_platform.Observation.edges)
  return edges_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Edge >&
Observation::edges() const {
  // @@protoc_insertion_point(field_list:energy_platform.Observation.edges)
  return edges_;
}

// -------------------------------------------------------------------

// Action

// string uid = 1;
inline void Action::clear_uid() {
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::uid() const {
  // @@protoc_insertion_point(field_get:energy_platform.Action.uid)
  return uid_.GetNoArena();
}
inline void Action::set_uid(const std::string& value) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.Action.uid)
}
inline void Action::set_uid(std::string&& value) {
  
  uid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.Action.uid)
}
inline void Action::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.Action.uid)
}
inline void Action::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.Action.uid)
}
inline std::string* Action::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.Action.uid)
  return uid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_uid() {
  // @@protoc_insertion_point(field_release:energy_platform.Action.uid)
  
  return uid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.Action.uid)
}

// float float_value = 2;
inline bool Action::has_float_value() const {
  return action_value_case() == kFloatValue;
}
inline void Action::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Action::clear_float_value() {
  if (has_float_value()) {
    action_value_.float_value_ = 0;
    clear_has_action_value();
  }
}
inline float Action::float_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.Action.float_value)
  if (has_float_value()) {
    return action_value_.float_value_;
  }
  return 0;
}
inline void Action::set_float_value(float value) {
  if (!has_float_value()) {
    clear_action_value();
    set_has_float_value();
  }
  action_value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.Action.float_value)
}

// int64 int_value = 3;
inline bool Action::has_int_value() const {
  return action_value_case() == kIntValue;
}
inline void Action::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Action::clear_int_value() {
  if (has_int_value()) {
    action_value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_action_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Action::int_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.Action.int_value)
  if (has_int_value()) {
    return action_value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Action::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_int_value()) {
    clear_action_value();
    set_has_int_value();
  }
  action_value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.Action.int_value)
}

// string info = 4;
inline void Action::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::info() const {
  // @@protoc_insertion_point(field_get:energy_platform.Action.info)
  return info_.GetNoArena();
}
inline void Action::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.Action.info)
}
inline void Action::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.Action.info)
}
inline void Action::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.Action.info)
}
inline void Action::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.Action.info)
}
inline std::string* Action::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.Action.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_info() {
  // @@protoc_insertion_point(field_release:energy_platform.Action.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.Action.info)
}

inline bool Action::has_action_value() const {
  return action_value_case() != ACTION_VALUE_NOT_SET;
}
inline void Action::clear_has_action_value() {
  _oneof_case_[0] = ACTION_VALUE_NOT_SET;
}
inline Action::ActionValueCase Action::action_value_case() const {
  return Action::ActionValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AllowedActionsRequest

// -------------------------------------------------------------------

// AllowedActionsResponse

// repeated .energy_platform.Action actions = 1;
inline int AllowedActionsResponse::actions_size() const {
  return actions_.size();
}
inline void AllowedActionsResponse::clear_actions() {
  actions_.Clear();
}
inline ::energy_platform::Action* AllowedActionsResponse::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.AllowedActionsResponse.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >*
AllowedActionsResponse::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.AllowedActionsResponse.actions)
  return &actions_;
}
inline const ::energy_platform::Action& AllowedActionsResponse::actions(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.AllowedActionsResponse.actions)
  return actions_.Get(index);
}
inline ::energy_platform::Action* AllowedActionsResponse::add_actions() {
  // @@protoc_insertion_point(field_add:energy_platform.AllowedActionsResponse.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >&
AllowedActionsResponse::actions() const {
  // @@protoc_insertion_point(field_list:energy_platform.AllowedActionsResponse.actions)
  return actions_;
}

// -------------------------------------------------------------------

// ResetRequest

// -------------------------------------------------------------------

// ResetResponse

// .energy_platform.ResetResponse.ResetStatus reset_status = 1;
inline void ResetResponse::clear_reset_status() {
  reset_status_ = 0;
}
inline ::energy_platform::ResetResponse_ResetStatus ResetResponse::reset_status() const {
  // @@protoc_insertion_point(field_get:energy_platform.ResetResponse.reset_status)
  return static_cast< ::energy_platform::ResetResponse_ResetStatus >(reset_status_);
}
inline void ResetResponse::set_reset_status(::energy_platform::ResetResponse_ResetStatus value) {
  
  reset_status_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.ResetResponse.reset_status)
}

// .energy_platform.Observation observation = 2;
inline bool ResetResponse::has_observation() const {
  return this != internal_default_instance() && observation_ != nullptr;
}
inline void ResetResponse::clear_observation() {
  if (GetArenaNoVirtual() == nullptr && observation_ != nullptr) {
    delete observation_;
  }
  observation_ = nullptr;
}
inline const ::energy_platform::Observation& ResetResponse::observation() const {
  const ::energy_platform::Observation* p = observation_;
  // @@protoc_insertion_point(field_get:energy_platform.ResetResponse.observation)
  return p != nullptr ? *p : *reinterpret_cast<const ::energy_platform::Observation*>(
      &::energy_platform::_Observation_default_instance_);
}
inline ::energy_platform::Observation* ResetResponse::release_observation() {
  // @@protoc_insertion_point(field_release:energy_platform.ResetResponse.observation)
  
  ::energy_platform::Observation* temp = observation_;
  observation_ = nullptr;
  return temp;
}
inline ::energy_platform::Observation* ResetResponse::mutable_observation() {
  
  if (observation_ == nullptr) {
    auto* p = CreateMaybeMessage<::energy_platform::Observation>(GetArenaNoVirtual());
    observation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:energy_platform.ResetResponse.observation)
  return observation_;
}
inline void ResetResponse::set_allocated_observation(::energy_platform::Observation* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete observation_;
  }
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    
  } else {
    
  }
  observation_ = observation;
  // @@protoc_insertion_point(field_set_allocated:energy_platform.ResetResponse.observation)
}

// string reset_info = 3;
inline void ResetResponse::clear_reset_info() {
  reset_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetResponse::reset_info() const {
  // @@protoc_insertion_point(field_get:energy_platform.ResetResponse.reset_info)
  return reset_info_.GetNoArena();
}
inline void ResetResponse::set_reset_info(const std::string& value) {
  
  reset_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.ResetResponse.reset_info)
}
inline void ResetResponse::set_reset_info(std::string&& value) {
  
  reset_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.ResetResponse.reset_info)
}
inline void ResetResponse::set_reset_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.ResetResponse.reset_info)
}
inline void ResetResponse::set_reset_info(const char* value, size_t size) {
  
  reset_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.ResetResponse.reset_info)
}
inline std::string* ResetResponse::mutable_reset_info() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.ResetResponse.reset_info)
  return reset_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetResponse::release_reset_info() {
  // @@protoc_insertion_point(field_release:energy_platform.ResetResponse.reset_info)
  
  return reset_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetResponse::set_allocated_reset_info(std::string* reset_info) {
  if (reset_info != nullptr) {
    
  } else {
    
  }
  reset_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_info);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.ResetResponse.reset_info)
}

// -------------------------------------------------------------------

// StepRequest

// repeated .energy_platform.Action actions = 1;
inline int StepRequest::actions_size() const {
  return actions_.size();
}
inline void StepRequest::clear_actions() {
  actions_.Clear();
}
inline ::energy_platform::Action* StepRequest::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:energy_platform.StepRequest.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >*
StepRequest::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:energy_platform.StepRequest.actions)
  return &actions_;
}
inline const ::energy_platform::Action& StepRequest::actions(int index) const {
  // @@protoc_insertion_point(field_get:energy_platform.StepRequest.actions)
  return actions_.Get(index);
}
inline ::energy_platform::Action* StepRequest::add_actions() {
  // @@protoc_insertion_point(field_add:energy_platform.StepRequest.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::energy_platform::Action >&
StepRequest::actions() const {
  // @@protoc_insertion_point(field_list:energy_platform.StepRequest.actions)
  return actions_;
}

// -------------------------------------------------------------------

// StepResponse

// .energy_platform.Observation observation = 1;
inline bool StepResponse::has_observation() const {
  return this != internal_default_instance() && observation_ != nullptr;
}
inline void StepResponse::clear_observation() {
  if (GetArenaNoVirtual() == nullptr && observation_ != nullptr) {
    delete observation_;
  }
  observation_ = nullptr;
}
inline const ::energy_platform::Observation& StepResponse::observation() const {
  const ::energy_platform::Observation* p = observation_;
  // @@protoc_insertion_point(field_get:energy_platform.StepResponse.observation)
  return p != nullptr ? *p : *reinterpret_cast<const ::energy_platform::Observation*>(
      &::energy_platform::_Observation_default_instance_);
}
inline ::energy_platform::Observation* StepResponse::release_observation() {
  // @@protoc_insertion_point(field_release:energy_platform.StepResponse.observation)
  
  ::energy_platform::Observation* temp = observation_;
  observation_ = nullptr;
  return temp;
}
inline ::energy_platform::Observation* StepResponse::mutable_observation() {
  
  if (observation_ == nullptr) {
    auto* p = CreateMaybeMessage<::energy_platform::Observation>(GetArenaNoVirtual());
    observation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:energy_platform.StepResponse.observation)
  return observation_;
}
inline void StepResponse::set_allocated_observation(::energy_platform::Observation* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete observation_;
  }
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    
  } else {
    
  }
  observation_ = observation;
  // @@protoc_insertion_point(field_set_allocated:energy_platform.StepResponse.observation)
}

// float reward = 2;
inline void StepResponse::clear_reward() {
  reward_ = 0;
}
inline float StepResponse::reward() const {
  // @@protoc_insertion_point(field_get:energy_platform.StepResponse.reward)
  return reward_;
}
inline void StepResponse::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.StepResponse.reward)
}

// bool done = 3;
inline void StepResponse::clear_done() {
  done_ = false;
}
inline bool StepResponse::done() const {
  // @@protoc_insertion_point(field_get:energy_platform.StepResponse.done)
  return done_;
}
inline void StepResponse::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.StepResponse.done)
}

// string info = 4;
inline void StepResponse::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StepResponse::info() const {
  // @@protoc_insertion_point(field_get:energy_platform.StepResponse.info)
  return info_.GetNoArena();
}
inline void StepResponse::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.StepResponse.info)
}
inline void StepResponse::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.StepResponse.info)
}
inline void StepResponse::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.StepResponse.info)
}
inline void StepResponse::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.StepResponse.info)
}
inline std::string* StepResponse::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.StepResponse.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StepResponse::release_info() {
  // @@protoc_insertion_point(field_release:energy_platform.StepResponse.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StepResponse::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.StepResponse.info)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// SetDataLocationRequest

// string data_path = 1;
inline void SetDataLocationRequest::clear_data_path() {
  data_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDataLocationRequest::data_path() const {
  // @@protoc_insertion_point(field_get:energy_platform.SetDataLocationRequest.data_path)
  return data_path_.GetNoArena();
}
inline void SetDataLocationRequest::set_data_path(const std::string& value) {
  
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.SetDataLocationRequest.data_path)
}
inline void SetDataLocationRequest::set_data_path(std::string&& value) {
  
  data_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.SetDataLocationRequest.data_path)
}
inline void SetDataLocationRequest::set_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.SetDataLocationRequest.data_path)
}
inline void SetDataLocationRequest::set_data_path(const char* value, size_t size) {
  
  data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.SetDataLocationRequest.data_path)
}
inline std::string* SetDataLocationRequest::mutable_data_path() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.SetDataLocationRequest.data_path)
  return data_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDataLocationRequest::release_data_path() {
  // @@protoc_insertion_point(field_release:energy_platform.SetDataLocationRequest.data_path)
  
  return data_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDataLocationRequest::set_allocated_data_path(std::string* data_path) {
  if (data_path != nullptr) {
    
  } else {
    
  }
  data_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_path);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.SetDataLocationRequest.data_path)
}

// -------------------------------------------------------------------

// SetDataLocationResponse

// .energy_platform.SetDataLocationResponse.LoadDataStatus status = 1;
inline void SetDataLocationResponse::clear_status() {
  status_ = 0;
}
inline ::energy_platform::SetDataLocationResponse_LoadDataStatus SetDataLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:energy_platform.SetDataLocationResponse.status)
  return static_cast< ::energy_platform::SetDataLocationResponse_LoadDataStatus >(status_);
}
inline void SetDataLocationResponse::set_status(::energy_platform::SetDataLocationResponse_LoadDataStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.SetDataLocationResponse.status)
}

// string message = 2;
inline void SetDataLocationResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDataLocationResponse::message() const {
  // @@protoc_insertion_point(field_get:energy_platform.SetDataLocationResponse.message)
  return message_.GetNoArena();
}
inline void SetDataLocationResponse::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_platform.SetDataLocationResponse.message)
}
inline void SetDataLocationResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:energy_platform.SetDataLocationResponse.message)
}
inline void SetDataLocationResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_platform.SetDataLocationResponse.message)
}
inline void SetDataLocationResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_platform.SetDataLocationResponse.message)
}
inline std::string* SetDataLocationResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:energy_platform.SetDataLocationResponse.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDataLocationResponse::release_message() {
  // @@protoc_insertion_point(field_release:energy_platform.SetDataLocationResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDataLocationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:energy_platform.SetDataLocationResponse.message)
}

// -------------------------------------------------------------------

// SetCurrentTaskRequest

// .energy_platform.Task current_task = 1;
inline void SetCurrentTaskRequest::clear_current_task() {
  current_task_ = 0;
}
inline ::energy_platform::Task SetCurrentTaskRequest::current_task() const {
  // @@protoc_insertion_point(field_get:energy_platform.SetCurrentTaskRequest.current_task)
  return static_cast< ::energy_platform::Task >(current_task_);
}
inline void SetCurrentTaskRequest::set_current_task(::energy_platform::Task value) {
  
  current_task_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.SetCurrentTaskRequest.current_task)
}

// -------------------------------------------------------------------

// SetCurrentTaskResponse

// -------------------------------------------------------------------

// GetEnvDescriptionRequest

// -------------------------------------------------------------------

// GetEnvDescriptionResponse

// int32 action_dim = 1;
inline void GetEnvDescriptionResponse::clear_action_dim() {
  action_dim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEnvDescriptionResponse::action_dim() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.action_dim)
  return action_dim_;
}
inline void GetEnvDescriptionResponse::set_action_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_dim_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.action_dim)
}

// int32 observation_dim = 2;
inline void GetEnvDescriptionResponse::clear_observation_dim() {
  observation_dim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEnvDescriptionResponse::observation_dim() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.observation_dim)
  return observation_dim_;
}
inline void GetEnvDescriptionResponse::set_observation_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  observation_dim_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.observation_dim)
}

// bool is_discrete = 3;
inline void GetEnvDescriptionResponse::clear_is_discrete() {
  is_discrete_ = false;
}
inline bool GetEnvDescriptionResponse::is_discrete() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.is_discrete)
  return is_discrete_;
}
inline void GetEnvDescriptionResponse::set_is_discrete(bool value) {
  
  is_discrete_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.is_discrete)
}

// float low_action_value = 4;
inline void GetEnvDescriptionResponse::clear_low_action_value() {
  low_action_value_ = 0;
}
inline float GetEnvDescriptionResponse::low_action_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.low_action_value)
  return low_action_value_;
}
inline void GetEnvDescriptionResponse::set_low_action_value(float value) {
  
  low_action_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.low_action_value)
}

// float high_action_value = 5;
inline void GetEnvDescriptionResponse::clear_high_action_value() {
  high_action_value_ = 0;
}
inline float GetEnvDescriptionResponse::high_action_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.high_action_value)
  return high_action_value_;
}
inline void GetEnvDescriptionResponse::set_high_action_value(float value) {
  
  high_action_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.high_action_value)
}

// int32 discrete_action_dimension = 6;
inline void GetEnvDescriptionResponse::clear_discrete_action_dimension() {
  discrete_action_dimension_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEnvDescriptionResponse::discrete_action_dimension() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.discrete_action_dimension)
  return discrete_action_dimension_;
}
inline void GetEnvDescriptionResponse::set_discrete_action_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  discrete_action_dimension_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.discrete_action_dimension)
}

// float low_observation_value = 7;
inline void GetEnvDescriptionResponse::clear_low_observation_value() {
  low_observation_value_ = 0;
}
inline float GetEnvDescriptionResponse::low_observation_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.low_observation_value)
  return low_observation_value_;
}
inline void GetEnvDescriptionResponse::set_low_observation_value(float value) {
  
  low_observation_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.low_observation_value)
}

// float high_observation_value = 8;
inline void GetEnvDescriptionResponse::clear_high_observation_value() {
  high_observation_value_ = 0;
}
inline float GetEnvDescriptionResponse::high_observation_value() const {
  // @@protoc_insertion_point(field_get:energy_platform.GetEnvDescriptionResponse.high_observation_value)
  return high_observation_value_;
}
inline void GetEnvDescriptionResponse::set_high_observation_value(float value) {
  
  high_observation_value_ = value;
  // @@protoc_insertion_point(field_set:energy_platform.GetEnvDescriptionResponse.high_observation_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace energy_platform

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::energy_platform::NodeParams_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_platform::NodeParams_ParamType>() {
  return ::energy_platform::NodeParams_ParamType_descriptor();
}
template <> struct is_proto_enum< ::energy_platform::EdgeParams_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_platform::EdgeParams_ParamType>() {
  return ::energy_platform::EdgeParams_ParamType_descriptor();
}
template <> struct is_proto_enum< ::energy_platform::ResetResponse_ResetStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_platform::ResetResponse_ResetStatus>() {
  return ::energy_platform::ResetResponse_ResetStatus_descriptor();
}
template <> struct is_proto_enum< ::energy_platform::SetDataLocationResponse_LoadDataStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_platform::SetDataLocationResponse_LoadDataStatus>() {
  return ::energy_platform::SetDataLocationResponse_LoadDataStatus_descriptor();
}
template <> struct is_proto_enum< ::energy_platform::Task> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_platform::Task>() {
  return ::energy_platform::Task_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Env_2eproto
