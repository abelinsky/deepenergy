/* Copyright 2019 Alexander Belinsky. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package energyplatform;
import "energyplatform/core/env_service_functions.proto";

////////////////////////////////////////////////////////////////////////////////
//
// Env defines a service that executes different operations on an Environment (see class definition).
//
////////////////////////////////////////////////////////////////////////////////

// Main class for all environments of the platform (gas system, energy system, industry infrastructure system, etc).
// Encapsulates the environment with arbitrary behind-the-scenes dynamics, which is governed by concrete virtual simulator.
service EnvService {
    // Loads data.
    rpc LoadData(LoadDataRequest) returns (LoadDataResponse);

    //  Sets current task 
    rpc SetCurrentTask(SetCurrentTaskRequest) returns (SetCurrentTaskResponse);

    // Loads data and returns environment description. Data location must be already set.
    rpc GetEnvDescription(GetEnvDescriptionRequest) returns (GetEnvDescriptionResponse);
    
    //  Returns the list of control parameters (possible agent's actions)
    rpc GetOptimizationParams(GetOptimizationParamsRequest) returns (GetOptimizationParamsResponse); 

    // Resets the state of the environment (the simulator state) and returns an initial observation.
    rpc Reset(ResetRequest) returns (ResetResponse);

    // Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
    rpc Step(StepRequest) returns (StepResponse);

    // Stops simulations.
    rpc Stop(StopRequest) returns (StopResponse);
}
