syntax = "proto3";

package energy_platform;

enum Task {
     /*  Types of tasks.*/
    UNDEFINED = 0;                      // not set
    FEED_FORWARD = 1;                   // feed forward calculation of technological mode's parameters
    AVAILABLE_TECHNOLOGICAL_MODE = 2;   // finds technological mode that satisfies technological constraints  
    MAX_THROUGHPUT = 3;                 // maximum system's capacity
    SIMPLE = 4;                         // simple task with fixed topology and 1 discrete control parameter
} 

message NodeParams {
    /*  Params of the system's node (see Node).  */

    enum ParamType {
        P = 0;   // pressure
        T = 1;   // temperature
        // add new param type here        
    }
    ParamType param_type = 1;
    float param_value = 2;
}

message EdgeParams {
    /*  Params of the edge (see Edge).  */

    enum ParamType {
        Q = 0;
        // add new param type here        
    }
    ParamType param_type = 1;
    float param_value = 2;
}

message Node {
    /*  Node is the  place where several physical technological objects ("edges") are interconnected.  
        In each node there is a shift and redistribution of product flows.
        Each node has state - the values of parameters, which describe physical system.
        The array of nodes and it's values determines  the state (or observation) of system.
    */

    int32 uid = 1;  // node's unique id
    repeated NodeParams node_params = 2;  // list of node's params
}

message Edge {
    /*  Edge is the physical object (equipment) of the system under control.
    */

    int32 uid = 1;  // unique id
    repeated EdgeParams edge_params = 2;  // list of egde's params
}

message Observation {
    /*  The observation of the environment's state */

    repeated Node nodes = 1;
    repeated Edge edges = 2;
}

message Action {
    /*  Possible action in the environment.*/

    string uid = 1; // unique identifier of control parameter
    oneof action_value { // Depending on action type, one of the values must be set
        float float_value = 2; 
        int64 int_value = 3; 
    }
    string info = 4;
}

message AllowedActionsRequest {
}

message AllowedActionsResponse {
    repeated Action actions = 1;
}

message ResetRequest {
    /*  Params needed to reset the environment. */
}

message ResetResponse {
    enum ResetStatus {
        READY_TO_SIMULATE = 0;
        RESET_FAILED = 1;
    }
    ResetStatus reset_status = 1;
    Observation observation = 2;
    string reset_info = 3;  // additional info that can be useful for debugging
}

message StepRequest {
    /* Params for one time step in environment's simulation process. */

	repeated Action actions = 1;
}

message StepResponse {
    /*  Contains results from one simulation step.  */

    Observation observation = 1; // agent's observation of the current environment
    float reward = 2;  // amount of reward returned after previous action
    bool done = 3; // whether the episode has ended
    string info = 4; // auxiliary diagnostic information (for debugging)
}

message StopRequest {
}

message StopResponse {
}

message SetDataLocationRequest {
    string data_path = 1;  // path to data with parameters of calculation models
}

message SetDataLocationResponse {
    enum LoadDataStatus {
        OK = 0;
        FAILED = 1;
    }
    LoadDataStatus status = 1;
    string message = 2;
}

message SetCurrentTaskRequest {
    Task current_task = 1;
}

message SetCurrentTaskResponse {
}

message GetEnvDescriptionRequest {
}

message GetEnvDescriptionResponse {
    int32 action_dim = 1;               // number of possible actions
    int32 observation_dim = 2;          // number of elements in observation
    
    // discrete actions?
    bool is_discrete = 3;
    // continues action dimensions
    float low_action_value = 4;
    float high_action_value = 5;
    // or discrete action dimension
    int32 discrete_action_dimension = 6; 

    // observation dimensions
    float low_observation_value = 7;
    float high_observation_value = 8;
}

service Env {
    /*  Main class for all environments of the platform (gas system, energy system, industry infrastructure system, etc).
        Encapsulates the environment with arbitrary behind-the-scenes dynamics, which is governed by concrete virtual simulator.
    */

    /* Sets data for calculations. */
    rpc SetDataLocation (SetDataLocationRequest) returns (SetDataLocationResponse);

    /* Loads data and returns environment description. Data location must be already set. */
    rpc GetEnvDescription (GetEnvDescriptionRequest) returns (GetEnvDescriptionResponse);

    /*  Sets current task  */
    rpc SetCurrentTask (SetCurrentTaskRequest) returns (SetCurrentTaskResponse);

    /*  Returns the list of control parameters (possible agent's actions) */
    rpc GetAllowedActions (AllowedActionsRequest) returns (AllowedActionsResponse); 

    /*  Resets the state of the environment (the simulator state) and returns an initial observation.
    
        Args:
            ResetParams: params needed to reset the simulator. 

        Returns:
            Observation: the initial observation. 
    */
    rpc Reset (ResetRequest) returns (ResetResponse);

    /*  Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
        
        Args:
            StepParams: the action provided by the AI-agent

        Returns:
            StepResult: results from the simulation step.

    */
    rpc Step (StepRequest) returns (StepResponse);

    /*  Stops simulations.
    */
    rpc Stop (StopRequest) returns (StopResponse);
}
