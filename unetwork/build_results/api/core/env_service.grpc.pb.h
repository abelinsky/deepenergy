// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/core/env_service.proto
// Original file comments:
// Copyright 2019 Alexander Belinsky. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_api_2fcore_2fenv_5fservice_2eproto__INCLUDED
#define GRPC_api_2fcore_2fenv_5fservice_2eproto__INCLUDED

#include "api/core/env_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace api {

// //////////////////////////////////////////////////////////////////////////////
//
// EnvService defines a service that executes different operations on an Environment (see class definition).
//
// //////////////////////////////////////////////////////////////////////////////
//
// Main class for all environments of the platform (gas system, energy system, industry infrastructure system, etc).
// Encapsulates the environment with arbitrary behind-the-scenes dynamics, which is governed by concrete virtual simulator.
class EnvService final {
 public:
  static constexpr char const* service_full_name() {
    return "api.EnvService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Loads data.
    virtual ::grpc::Status LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::api::LoadDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>> AsyncLoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>>(AsyncLoadDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>> PrepareAsyncLoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>>(PrepareAsyncLoadDataRaw(context, request, cq));
    }
    //  Sets current task 
    virtual ::grpc::Status SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::api::SetCurrentTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>> AsyncSetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>>(AsyncSetCurrentTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>> PrepareAsyncSetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>>(PrepareAsyncSetCurrentTaskRaw(context, request, cq));
    }
    // Loads data and returns environment description. Data location must be already set.
    virtual ::grpc::Status GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::api::GetEnvDescriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>> AsyncGetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>>(AsyncGetEnvDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>> PrepareAsyncGetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>>(PrepareAsyncGetEnvDescriptionRaw(context, request, cq));
    }
    //  Returns the list of control parameters (possible agent's actions)
    virtual ::grpc::Status GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::api::GetOptimizationParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>> AsyncGetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>>(AsyncGetOptimizationParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>> PrepareAsyncGetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>>(PrepareAsyncGetOptimizationParamsRaw(context, request, cq));
    }
    // Resets the state of the environment (the simulator state) and returns an initial observation.
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::api::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::api::StepRequest& request, ::api::StepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    // Stops simulations.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Loads data.
      virtual void LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Sets current task 
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Loads data and returns environment description. Data location must be already set.
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //  Returns the list of control parameters (possible agent's actions)
      virtual void GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Resets the state of the environment (the simulator state) and returns an initial observation.
      virtual void Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
      virtual void Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Stops simulations.
      virtual void Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>* AsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::LoadDataResponse>* PrepareAsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>* AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::SetCurrentTaskResponse>* PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>* AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::GetEnvDescriptionResponse>* PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>* AsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::GetOptimizationParamsResponse>* PrepareAsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::api::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::api::LoadDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>> AsyncLoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>>(AsyncLoadDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>> PrepareAsyncLoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>>(PrepareAsyncLoadDataRaw(context, request, cq));
    }
    ::grpc::Status SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::api::SetCurrentTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>> AsyncSetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>>(AsyncSetCurrentTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>> PrepareAsyncSetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>>(PrepareAsyncSetCurrentTaskRaw(context, request, cq));
    }
    ::grpc::Status GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::api::GetEnvDescriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>> AsyncGetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>>(AsyncGetEnvDescriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>> PrepareAsyncGetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>>(PrepareAsyncGetEnvDescriptionRaw(context, request, cq));
    }
    ::grpc::Status GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::api::GetOptimizationParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>> AsyncGetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>>(AsyncGetOptimizationParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>> PrepareAsyncGetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>>(PrepareAsyncGetOptimizationParamsRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::api::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::api::StepRequest& request, ::api::StepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::api::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>* AsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>* PrepareAsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>* AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>* PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>* AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>* PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>* AsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>* PrepareAsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::api::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadData_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCurrentTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEnvDescription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOptimizationParams_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Loads data.
    virtual ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response);
    //  Sets current task 
    virtual ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response);
    // Loads data and returns environment description. Data location must be already set.
    virtual ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response);
    //  Returns the list of control parameters (possible agent's actions)
    virtual ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response);
    // Resets the state of the environment (the simulator state) and returns an initial observation.
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response);
    // Performs one timestep of the environment's dynamics. When end of the episode is reached, you have to call Reset().
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response);
    // Stops simulations.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadData(::grpc::ServerContext* context, ::api::LoadDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::LoadDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentTask(::grpc::ServerContext* context, ::api::SetCurrentTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::SetCurrentTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvDescription(::grpc::ServerContext* context, ::api::GetEnvDescriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::GetEnvDescriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOptimizationParams() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOptimizationParams(::grpc::ServerContext* context, ::api::GetOptimizationParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::GetOptimizationParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::api::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::api::StepRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::StepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::api::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::api::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadData<WithAsyncMethod_SetCurrentTask<WithAsyncMethod_GetEnvDescription<WithAsyncMethod_GetOptimizationParams<WithAsyncMethod_Reset<WithAsyncMethod_Step<WithAsyncMethod_Stop<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LoadData() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::api::LoadDataRequest, ::api::LoadDataResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::LoadDataRequest* request,
                 ::api::LoadDataResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LoadData(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_LoadData(
        ::grpc::experimental::MessageAllocator< ::api::LoadDataRequest, ::api::LoadDataResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::LoadDataRequest, ::api::LoadDataResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetCurrentTask() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::api::SetCurrentTaskRequest, ::api::SetCurrentTaskResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::SetCurrentTaskRequest* request,
                 ::api::SetCurrentTaskResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetCurrentTask(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetCurrentTask(
        ::grpc::experimental::MessageAllocator< ::api::SetCurrentTaskRequest, ::api::SetCurrentTaskResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::SetCurrentTaskRequest, ::api::SetCurrentTaskResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetEnvDescription() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::api::GetEnvDescriptionRequest, ::api::GetEnvDescriptionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::GetEnvDescriptionRequest* request,
                 ::api::GetEnvDescriptionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetEnvDescription(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetEnvDescription(
        ::grpc::experimental::MessageAllocator< ::api::GetEnvDescriptionRequest, ::api::GetEnvDescriptionResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::GetEnvDescriptionRequest, ::api::GetEnvDescriptionResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetOptimizationParams() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::api::GetOptimizationParamsRequest, ::api::GetOptimizationParamsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::GetOptimizationParamsRequest* request,
                 ::api::GetOptimizationParamsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetOptimizationParams(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetOptimizationParams(
        ::grpc::experimental::MessageAllocator< ::api::GetOptimizationParamsRequest, ::api::GetOptimizationParamsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::GetOptimizationParamsRequest, ::api::GetOptimizationParamsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::api::ResetRequest, ::api::ResetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::ResetRequest* request,
                 ::api::ResetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Reset(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::api::ResetRequest, ::api::ResetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::ResetRequest, ::api::ResetResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::api::StepRequest, ::api::StepResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::StepRequest* request,
                 ::api::StepResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Step(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Step(
        ::grpc::experimental::MessageAllocator< ::api::StepRequest, ::api::StepResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::StepRequest, ::api::StepResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::api::StopRequest, ::api::StopResponse>(
          [this](::grpc::ServerContext* context,
                 const ::api::StopRequest* request,
                 ::api::StopResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::api::StopRequest, ::api::StopResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::api::StopRequest, ::api::StopResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_LoadData<ExperimentalWithCallbackMethod_SetCurrentTask<ExperimentalWithCallbackMethod_GetEnvDescription<ExperimentalWithCallbackMethod_GetOptimizationParams<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_Step<ExperimentalWithCallbackMethod_Stop<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOptimizationParams() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LoadData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEnvDescription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOptimizationParams() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOptimizationParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LoadData(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoadData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCurrentTask() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetCurrentTask(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetCurrentTask(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEnvDescription() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetEnvDescription(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetEnvDescription(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOptimizationParams() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetOptimizationParams(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOptimizationParams(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Reset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Step() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Step(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Step(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::api::LoadDataRequest, ::api::LoadDataResponse>(std::bind(&WithStreamedUnaryMethod_LoadData<BaseClass>::StreamedLoadData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::LoadDataRequest,::api::LoadDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCurrentTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCurrentTask() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::api::SetCurrentTaskRequest, ::api::SetCurrentTaskResponse>(std::bind(&WithStreamedUnaryMethod_SetCurrentTask<BaseClass>::StreamedSetCurrentTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCurrentTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCurrentTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::SetCurrentTaskRequest,::api::SetCurrentTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEnvDescription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEnvDescription() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::api::GetEnvDescriptionRequest, ::api::GetEnvDescriptionResponse>(std::bind(&WithStreamedUnaryMethod_GetEnvDescription<BaseClass>::StreamedGetEnvDescription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEnvDescription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEnvDescription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::GetEnvDescriptionRequest,::api::GetEnvDescriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOptimizationParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOptimizationParams() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::api::GetOptimizationParamsRequest, ::api::GetOptimizationParamsResponse>(std::bind(&WithStreamedUnaryMethod_GetOptimizationParams<BaseClass>::StreamedGetOptimizationParams, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOptimizationParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOptimizationParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::GetOptimizationParamsRequest,::api::GetOptimizationParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::api::ResetRequest, ::api::ResetResponse>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::ResetRequest,::api::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::api::StepRequest, ::api::StepResponse>(std::bind(&WithStreamedUnaryMethod_Step<BaseClass>::StreamedStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::StepRequest,::api::StepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::api::StopRequest, ::api::StopResponse>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::api::StopRequest,::api::StopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LoadData<WithStreamedUnaryMethod_SetCurrentTask<WithStreamedUnaryMethod_GetEnvDescription<WithStreamedUnaryMethod_GetOptimizationParams<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LoadData<WithStreamedUnaryMethod_SetCurrentTask<WithStreamedUnaryMethod_GetEnvDescription<WithStreamedUnaryMethod_GetOptimizationParams<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Stop<Service > > > > > > > StreamedService;
};

}  // namespace api


#endif  // GRPC_api_2fcore_2fenv_5fservice_2eproto__INCLUDED
