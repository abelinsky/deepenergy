#include "pch.h"
#include "pch.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/core/env_service.proto

#include "api/core/env_service.pb.h"
#include "api/core/env_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {

static const char* EnvService_method_names[] = {
  "/api.EnvService/LoadData",
  "/api.EnvService/SetCurrentTask",
  "/api.EnvService/GetEnvDescription",
  "/api.EnvService/GetOptimizationParams",
  "/api.EnvService/Reset",
  "/api.EnvService/Step",
  "/api.EnvService/Stop",
};

std::unique_ptr< EnvService::Stub> EnvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvService::Stub> stub(new EnvService::Stub(channel));
  return stub;
}

EnvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LoadData_(EnvService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentTask_(EnvService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEnvDescription_(EnvService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOptimizationParams_(EnvService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(EnvService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(EnvService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(EnvService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnvService::Stub::LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::api::LoadDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadData_, context, request, response);
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::LoadData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::LoadDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>* EnvService::Stub::AsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::LoadDataResponse>* EnvService::Stub::PrepareAsyncLoadDataRaw(::grpc::ClientContext* context, const ::api::LoadDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::LoadDataResponse>::Create(channel_.get(), cq, rpcmethod_LoadData_, context, request, false);
}

::grpc::Status EnvService::Stub::SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::api::SetCurrentTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCurrentTask_, context, request, response);
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::SetCurrentTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::SetCurrentTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCurrentTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>* EnvService::Stub::AsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::SetCurrentTaskResponse>* EnvService::Stub::PrepareAsyncSetCurrentTaskRaw(::grpc::ClientContext* context, const ::api::SetCurrentTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::SetCurrentTaskResponse>::Create(channel_.get(), cq, rpcmethod_SetCurrentTask_, context, request, false);
}

::grpc::Status EnvService::Stub::GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::api::GetEnvDescriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEnvDescription_, context, request, response);
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::GetEnvDescription(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetEnvDescriptionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEnvDescription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>* EnvService::Stub::AsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetEnvDescriptionResponse>* EnvService::Stub::PrepareAsyncGetEnvDescriptionRaw(::grpc::ClientContext* context, const ::api::GetEnvDescriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::GetEnvDescriptionResponse>::Create(channel_.get(), cq, rpcmethod_GetEnvDescription_, context, request, false);
}

::grpc::Status EnvService::Stub::GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::api::GetOptimizationParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOptimizationParams_, context, request, response);
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::GetOptimizationParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::GetOptimizationParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOptimizationParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>* EnvService::Stub::AsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::GetOptimizationParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetOptimizationParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::GetOptimizationParamsResponse>* EnvService::Stub::PrepareAsyncGetOptimizationParamsRaw(::grpc::ClientContext* context, const ::api::GetOptimizationParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::GetOptimizationParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetOptimizationParams_, context, request, false);
}

::grpc::Status EnvService::Stub::Reset(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::api::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ResetResponse>* EnvService::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::ResetResponse>* EnvService::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::api::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status EnvService::Stub::Step(::grpc::ClientContext* context, const ::api::StepRequest& request, ::api::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Step_, context, request, response);
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::api::StepRequest* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Step(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StepResponse>* EnvService::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StepResponse>* EnvService::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::api::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StepResponse>::Create(channel_.get(), cq, rpcmethod_Step_, context, request, false);
}

::grpc::Status EnvService::Stub::Stop(::grpc::ClientContext* context, const ::api::StopRequest& request, ::api::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::api::StopRequest* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void EnvService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::api::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::StopResponse>* EnvService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::api::StopResponse>* EnvService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::api::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::api::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

EnvService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::LoadDataRequest, ::api::LoadDataResponse>(
          std::mem_fn(&EnvService::Service::LoadData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::SetCurrentTaskRequest, ::api::SetCurrentTaskResponse>(
          std::mem_fn(&EnvService::Service::SetCurrentTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::GetEnvDescriptionRequest, ::api::GetEnvDescriptionResponse>(
          std::mem_fn(&EnvService::Service::GetEnvDescription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::GetOptimizationParamsRequest, ::api::GetOptimizationParamsResponse>(
          std::mem_fn(&EnvService::Service::GetOptimizationParams), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::ResetRequest, ::api::ResetResponse>(
          std::mem_fn(&EnvService::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::StepRequest, ::api::StepResponse>(
          std::mem_fn(&EnvService::Service::Step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvService::Service, ::api::StopRequest, ::api::StopResponse>(
          std::mem_fn(&EnvService::Service::Stop), this)));
}

EnvService::Service::~Service() {
}

::grpc::Status EnvService::Service::LoadData(::grpc::ServerContext* context, const ::api::LoadDataRequest* request, ::api::LoadDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::SetCurrentTask(::grpc::ServerContext* context, const ::api::SetCurrentTaskRequest* request, ::api::SetCurrentTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::GetEnvDescription(::grpc::ServerContext* context, const ::api::GetEnvDescriptionRequest* request, ::api::GetEnvDescriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::GetOptimizationParams(::grpc::ServerContext* context, const ::api::GetOptimizationParamsRequest* request, ::api::GetOptimizationParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Reset(::grpc::ServerContext* context, const ::api::ResetRequest* request, ::api::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Step(::grpc::ServerContext* context, const ::api::StepRequest* request, ::api::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvService::Service::Stop(::grpc::ServerContext* context, const ::api::StopRequest* request, ::api::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

