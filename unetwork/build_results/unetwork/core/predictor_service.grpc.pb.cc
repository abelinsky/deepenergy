#include "pch.h"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: unetwork/core/predictor_service.proto

#include "unetwork/core/predictor_service.pb.h"
#include "unetwork/core/predictor_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace unetwork {

static const char* PredictorService_method_names[] = {
  "/unetwork.PredictorService/Predict",
};

std::unique_ptr< PredictorService::Stub> PredictorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PredictorService::Stub> stub(new PredictorService::Stub(channel));
  return stub;
}

PredictorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Predict_(PredictorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PredictorService::Stub::Predict(::grpc::ClientContext* context, const ::unetwork::PredictRequest& request, ::unetwork::PredictReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Predict_, context, request, response);
}

void PredictorService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::unetwork::PredictRequest* request, ::unetwork::PredictReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::PredictReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, std::move(f));
}

void PredictorService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::unetwork::PredictRequest* request, ::unetwork::PredictReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, reactor);
}

void PredictorService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::unetwork::PredictReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::unetwork::PredictReponse>* PredictorService::Stub::AsyncPredictRaw(::grpc::ClientContext* context, const ::unetwork::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::PredictReponse>::Create(channel_.get(), cq, rpcmethod_Predict_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::unetwork::PredictReponse>* PredictorService::Stub::PrepareAsyncPredictRaw(::grpc::ClientContext* context, const ::unetwork::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::unetwork::PredictReponse>::Create(channel_.get(), cq, rpcmethod_Predict_, context, request, false);
}

PredictorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictorService::Service, ::unetwork::PredictRequest, ::unetwork::PredictReponse>(
          std::mem_fn(&PredictorService::Service::Predict), this)));
}

PredictorService::Service::~Service() {
}

::grpc::Status PredictorService::Service::Predict(::grpc::ServerContext* context, const ::unetwork::PredictRequest* request, ::unetwork::PredictReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace unetwork

